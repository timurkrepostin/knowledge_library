Хранение данных в браузере
**  https://doka.guide/js/browsers-storages/
    https://doka.guide/js/cookie/
    https://doka.guide/js/local-storage/
    https://doka.guide/js/session-storage/  
Хранение данных в браузере

При разработке современных веб-сайтов достаточно часто необходимо сохранять данные
на стороне клиента. Для таких целей в браузере существует несколько разных способов,
которые появились в разное время и отличаются друг от друга.

Cookie
Данные, хранящиеся в куках, также передаются на сервер в виде HTTP-заголовка
и могут быть им изменены. Cookie являются частью спецификации протокола HTTP,
и их поддерживают все браузеры.
Этим способом пользуются для хранения авторизационных данных или когда доступ
к записанным данным нужен на сервере. Ещё куки используются для отслеживания поведения
пользователя на сайте, но браузеры активно с этим борются.
При установке кук можно указывать не только её название и значение, но и другие
параметры. Все они являются необязательными и разделяются точкой с запятой ;
* path – определяет путь, по которому будет доступна кука. Он должен быть абсолютным,
то есть начинаться с /. Если параметр не передан, то кука будет доступна на всех
страницах сайта.
* domain - определяет домен, для которого указана кука. Если не указано, то будет
использоваться текущий домен.
* max-age и expires - определяет время жизни куки.max-age указывает,
через сколько секунд, а expires указывает точное время, когда кука станет
недействительна. Время для expires можно отформатировать с помощью встроенного метода
даты Date.toUTCString()
* secure - указывает, что данная кука может быть передана только при запросах по
защищённому протоколу HTTPS.
* samesite - определяет, может ли данная кука быть отправлена при кросс-доменном
запросе. Значение параметра strict будет предотвращать отправку на другие домены,
а lax разрешит отправлять куки с GET-запросами.

* Web Storage – это интерфейс взаимодействия с хранилищем. Есть две реализации этого API:
Local Storage и Session Storage. Оба способа имеют идентичный API и ограничения,
а основным различием является время хранения данных.
* Session Storage похож на краткосрочные Cookie, потому что данные в этом хранилище
хранятся только во время жизни текущей сессии.
Это объект, хранящийся в window, который позволяет сохранять данные в браузере
на время сессии. Этот тип хранилища очень похож на localStorage и работает
как хранилище данных в формате ключ-значение. При сохранении данных мы указываем
имя поля, в которое должны быть сохранены данные, и затем используем это имя для их
получения.
Сессия страницы создаётся при открытии новой вкладки браузера. Сессия остаётся активной
до тех пор, пока открыта вкладка, а состояние сессии сохраняется между перезагрузками.
Открытие новой вкладки с таким же адресом приведёт к созданиюновой сессии.
Значения хранятся в виде строк. При попытке сохранения других типов данных,
они будут приведены к строке. Например, если записать число, то при чтении нам
вернётся число, записанное в строку.
Максимальный объем данных ограничен размером 5MB.
Local Storage, в теории, является бессрочным хранилищем данных.
Хотя данные и должны храниться бессрочно, браузеры все равно вводят свои ограничения.
Это объект, хранящийся в window, который позволяет долговременно сохранять данные
в браузере. Работает как хранилище данных в формате ключ-значение — при сохранении
данных мы указываем имя поля, в которое должны быть сохранены данные, и затем используем
это имя для их получения.
Значения хранятся в виде строк. При попытке сохранения других типов данных, они будут
приведены к строке. Например, если записать число, то при чтении нам вернётся число,
записанное в строку.
Не имеет ограничений по времени хранения, может быть очищен пользователем вручную
или браузером при переполнении автоматически (браузеры на основе движка WebKit,
например Safari, очищают localStorage, если к нему не обращались в течение 7 дней).
Максимальный объем данных ограничен размером 5MB.