** https://doka.guide/tools/network/

У каждого сетевого устройства есть собственный сетевой адрес. В Интернете это IP-адрес
(Internet Protocol — межсетевой протокол). Благодаря этому протоколу пакеты, которые отправляются по сети,
находят наиболее короткий путь от источника к адресату.
Кроме IP-адреса используются ещё и порты. Порт — это число, которое обозначает номер соединения.
Порт необходим для того, чтобы определить программу или драйвер устройства в сети, которые будут
обрабатывать пришедший пакет или отсылать исходящий.
Количество портов ограничено и находится в диапазоне от 1 до 65 535.
Для передачи пакетов от одного сетевого устройства к другому в Интернете используются протоколы
транспортного уровня, которые делятся на две группы: с проверкой целостности данных и без неё.
Протоколы с проверкой целостности данных используются для передачи веб-страниц или файлов.
Они проверяют целостность данных, запрашивают утерянные пакеты или пакеты, в которых была найдена ошибка.
Самые распространённые — TCP (Transmission Control Protocol — протокол управления передачей)
и TLS (Transport Layer Security — протокол защиты транспортного уровня).
Протоколы без проверки целостности используются для передачи видео или аудио, потому что они позволяют
передавать больше данных, но с потерями. Пример такого протокола — это UDP
(User Datagram Protocol — протокол пользовательских датаграмм), который не обращает
внимания на утерянные пакеты или пакеты с ошибками.
Пары TCP/IP, TLS/IP или UDP/IP обеспечивают передачу пакетов между сетевыми устройствами
и обычно называются стеками протоколов передачи данных. В современных операционных системах служба
для работы с пакетами, адресами и портами часто реализуется на уровне ядра.
Правила же обработки пакетов можно настраивать.

http или https - это протоколы прикладного уровня,
которые описывают уже не пакеты и адреса сетевых устройств, а правила формирования набора данных для
передачи того или иного формата. Часто http ассоциируется с небезопасным сайтом,
многие браузеры сообщают нам об этом.
Применение HTTPS внесло ряд новых правил обработки данных, которые отныне не должны передаваться
в открытом виде, а должны шифроваться. В протоколе HTTP используется TCP в качестве транспортного протокола,
который совсем никак не защищает данные. Если подключиться к одному из сетевых устройств,
через которое проходят пакеты, то можно прочитать их содержимое. Протокол HTTPS использует
другой протокол транспортного уровня — TLS, который подразумевает шифрование пакетов.
Данные пользователя передаются в зашифрованном виде.

Сетевая служба и сетевые сервисы
Сетевая служба организует передачу данных на уровне операционной системы. Она обеспечивает создание
соединения (сокета) для сетевого сервиса и привязку его к определённому порту. После того как такое
соединение создано, сетевая служба посылает все пакеты от сервиса или к сервису через указанный порт.
Сетевые сервисы — это конкретные приложения, службы, демоны, которые работают в качестве поставщика данных:
веб-серверы, серверы для обмена электронной почтой, серверы сообщений для мессенджеров, FTP-серверы,
VPN-серверы, серверы для IP-телефонии и прочее.
Например, в браузере для передачи веб-страниц через протокол HTTPS по умолчанию используется порт 443,
то есть https://example.com и https://example.com:443 эквивалентны. Поэтому браузер подставляет :443,
даже не отображая это в интерфейсе. Порт даёт понять сетевой службе на сервере, какой сервис будет
использоваться для обработки данных, которые приходят в виде пакетов.

** https://selectel.ru/blog/network-protocols/

Интернет-протокол и IP-адреса
Internet Protocol (IP) — это наиболее простой протокол, объединивший отдельные компьютеры в глобальную сеть.
Главной его задачей является маршрутизация дейтаграмм — определение маршрута следования пакетов по узлам сети.
Каждое устройство — ваш ПК, принтер и т.д. — имеет IP-адрес, чтобы данные попадали к нужному адресату.
Так, например, отправленный на печать файл не окажется вместо принтера в личном ПК вашего коллеги.

TCP — протокол обмена сообщениями в сети Интернет
TCP помогает устройствам в сети обмениваться сообщениями. Он работает на четвертом, транспортном, уровне модели OSI. 
Для передачи информации происходит дробление исходного файла на части, которые передаются получателю,
а далее собираются обратно. Например, человек запрашивает веб-страницу, далее сервер обрабатывает запрос
и высылает в ответ HTML-страницу при помощи протокола HTTP. Он, в свою очередь, запрашивает уровень TCP
для установки требуемого соединения и отправки HTML-файла. TCP конвертирует данные в блоки, передавая их
на уровень TCP пользователя, где происходит подтверждение передачи. 
Свойства протокола TCP:
● Система нумерации сегментов (Segment Numbering System). TCP отслеживает передаваемые или принимаемые сегменты,
присваивая номера каждому из них. Байтам данных, которые должны быть переданы, присваивается определенный
номер байта, в то время как сегментам присваиваются порядковые номера.
● Управление потоком. Эта функция ограничивает скорость, с которой отправитель передает данные.
Это делается для обеспечения надежности доставки. Получатель постоянно сообщает отправителю о том,
какой объем данных может быть получен.
● Контроль ошибок. Данная функция реализуется для повышения надежности путем проверки байтов на целостность.
● Порт источника и порт назначения. Протокол TCP использует специальные порты для связи  различных протоколов.
Например протокол SSH использует 22й порт, HTTP — 80, HTTPS — 443, Gopher — 70. Все порты делятся
на три диапазона — общеизвестные (0—1023), зарегистрированные (1024—49151) и динамические (49152—65535).

UDP — аналог TCP: описание отличий в поведении протокола в сети
В отличие от протокола ТСР User Datagram Protocol обеспечивает передачу данных без получения подтверждения
от пользователя о результате действия. Благодаря этому достигается большая скорость работы
и передачи данных в ущерб надежности и безопасности. 
Особенности протокола диктуют специфику его применения. Так, он подходит для приложений, например,
Skype, Discord и другие, которые работают в реальном времени и где задержка передачи данных может быть проблемой.
Также его предпочтительно использовать в приложениях с большим количеством подключенных клиентов — например, в играх,
голосовых или видеоконференциях, а также при потоковой передаче мультимедиа.
UDP работает путем сбора данных в UDP-пакете и добавления в пакет собственной информации заголовка.
Заголовок UDP включает четыре поля, объем которых составляет 2 байта каждый: номер порта источника,
номер порта назначения, длина заголовка и контрольная сумма блока.

FTP — протокол передачи данных в сети
FTP — это клиент-серверный протокол, который использует два канала для передачи данных: командный,
управляющий процессом передачи, и транспортный, непосредственно передающий информацию.
Для FTP-протокола устройство конечного пользователя называется локальным хостом, а второй компьютер — удаленным хостом,
играющим роль сервера.
Для работы протокола требуется его правильная настройка со стороны хоста и специальный клиент на локальном хосте. 
Пользователю нужно войти на FTP-сервер. Здесь нужно учитывать, что некоторые серверы разрешают доступ к части или
всем своим данным без авторизации. Это называется «анонимным FTP». При этом файлы с сервера можно будет
только передавать на компьютер клиента. 
Далее клиент начинает диалог с сервером — запрашивает разрешение на изменение файлов на сервере.
Использую авторизованный FTP-клиент, можно скачивать файлы с сервера, отгружать их на него и выполнять другие манипуляции. 
FTP-сессии работают в двух режимах — активном и пассивном: 
При активном режиме сервер после инициализации, путем вызова командного канала, открывает транспортный канал
и начинает передачу данных. 
При пассивном режиме сервер при помощи командного канала отправляет клиенту данные, требующиеся
для открытия канала передачи данных. 
Из-за того, что клиент создает все подключения в пассивном режиме, этот протокол хорошо подходит
для работы с брандмауэрами.
Как и FTP, FTPS работает по модели клиент-сервер, используя канал управления и канал передачи данных для обмена
командами FTP и данными во время клиентского сеанса FTPS.
Сессия FTPS аутентифицируется при помощи логина, пароля и сертификата открытого ключа (аналогично тому, как работает  HTTPS).
Инструменты, такие как OpenSSL, позволяют запрашивать и создавать сертификат ключа. При соединении с сервером FTPS
клиент сначала проверяет надежность сертификата сервера, после чего осуществляет подключение.
Когда доверенный центр сертификации (CA) подписывает эти сертификаты, он гарантирует, что клиент подключен к надежному
и безопасному серверу. Это помогает защититься от ряда атак, в том числе от атак посредника.

Как работает WebSocket и в чем его отличия от HTTP
Протокол HTTP однонаправленный. После цикла «запрос — ответ» соединение закрывается, а любой следующий запрос каждый раз
устанавливает новое соединение с сервером: сколько запросов, столько и соединений. Процесс передачи данных происходит с
некоторыми задержками за счет того, что есть накладные расходы на установку нового соединения при каждом запросе/ответе,
а также сетевая и серверная нагрузка из-за обилия периодических запросов. 
Протокол WebSocket двунаправленный, полнодуплексный, что означает, что он может одновременно и получать, и передавать информацию.
Веб-сокет делает это множество раз в одном открытом соединении. У такого соединения и скорость выше, чем у HTTP.
У веб-сокетов также есть возможность шифровать передаваемые данные, для этого используется надстройка над протоколом — WSS.
Если передаваемые данные не зашифрованы, они становятся объектом для привлечения таких угроз, как несанкционированный доступ
к клиенту третьих сторон, использование вредоносного ПО. Специальные надстройки протоколов передачи данных кодируют информацию
на стороне отправителя и раскодируют на стороне получателя, оставляя ее зашифрованной для любых посредников.
Так достигается безопасный транспортный уровень.
Для установления соединения веб-сокет применяет метод открывающего рукопожатия. Он заключается в том, что клиент предваряет
отправку/получение сообщений предварительным запросом, в котором клиент и сервер «договариваются» использовать веб-сокеты.
Это и есть «рукопожатие». Структура такого запроса похожа на HTTP, но немного отличается от него.
Затем клиент и сервер обмениваются данными уже в рамках этого соединения.
Кроме того, у веб-сокетов есть дополнительные расширения, которые дополняют и расширяют протокол.
Например, есть расширение для сжатия данных. Или возможность передавать данные в формате протоколов SOAP, WAMP или XMPP.
Чтобы эти расширения работали, они должны поддерживаться и сервером, и клиентом.
WebSocket подходит, когда нужны обновления данных в реальном времени и возможность доставлять сообщения клиенту.
Несколько примеров для WebSocket:
Когда использовать и не использовать WebSocket
торговые приложения с изменчивостью котировок, цен в реальном времени: платформы продаж, биржи;
игровые приложения;
чаты, в том числе на сайтах поддержки;
push-уведомления;
социальные сети;
управление устройствами в IoT (используется подпротокол WAMP).