
** Ksendzoff course_theory
1. Когда в браузере (программа-клиент), в который сервер отправляет HTML, CSS, JS файлы,
производится запрос, запрос летит в центральный комутатор, после в DNS в котором по названию
домена переводит в их уникальный ip адрес, и после прилетает на сам сервер, который дает ответ
клиенту, проходя тот же путь в обратном порядке
2. Приведя аналогию дома, если Server - дом, то port - домофон. Если запустить на сервере 
два http сервера, то один может быть на 5005, второй на 5007
3. API, ключевое слово слово interface - элемент управления системой
4. EndPoint - API состоит из EndPoint'ов и при взаимодействии с каждым EndPoint'ом 
сервер отправляет определенный ответ
5. Отдать ответ значит отправить пакет данных состоящий из HTML, CSS, JS - файлов,
подтянуть что-то из БД и отправить на клиент
6. Фронтенд - разработчики пишут файлы, которые в конечном итоге подхватит бэкенд
и отправит клиенту при определенном запросе
7. Работа архитектуры на примере логина на абстрактном сайте:
- Отправляем url login, чтобы сервер поймал эндпоинт login, после чего он отправит набор
HTML, CSS, JS -файлов, благодаря которым на клиенте отрисуется странице логина;
- После того, как заполнили форму и нажали кнопку логин, начинает работать скрипт валидации,
чтобы проверить все ли в норме, если все ок - 
срабатывает скрипт отправки запроса на сервер в эндпоинт loginUser
- Запрос при логине производится методом POST, поэтому скрипт формирует JSON-файл
с данными пользователя, который кладется в body тела запроса, в HEAD указывается EndPoint
- На сервер приходит запрос в EndPoint loginUser, забирается логин и пароль
и происходит следующая логика:
- Запрос с логином с сервера отправляется в базу данных с сервера, база данных дает ответ, 
происходит идентификация, что такой пользователь в системе есть
- Далее проверяется пароль, тот ли это user, происходит аутентификация, когда подтверждается
- Проверяется этот user может в системе и что ему можно (права пользователя), это авторизация
- После того, как три фактора сошлись, сервер отправляет ответ пользователю со страницей личного
кабинета, данные личного кабинета подтягиваются из БД
- Пользователь получает доступ к личному кабинету со всеми своими личными данными и пропуск -
токен, являющийся уникальным идентификатором залогининого пользователя 
- Когда пользователь, решит что-то проверить по личному кабинету, при отправке запроса
на это будет прикладываться токен, который обрабатывает сервер на наличие 
  прав на данное действие у пользователя, токен может закладываться в куки
8. Сервер может стать клиентом, отправляя запросы по определенным EndPoint на 3rd-party 

** Doka guide https://doka.guide/js/web-app-works/
1. Любое веб-приложение, если оно работает в браузере, работает на 3 основных технологиях:
HTML, CSS и JS.

2. Хранением и обработкой данных обычно занимается сервер или бэкенд.
Бэкенд — область веб-технологий, работающих на сервере, а также внутренняя часть серверной системы,
занимается обработкой данных.

3. При описании архитектуры мы не вдаёмся в подробности каждого конкретного модуля,
а скорее описываем их взаимодействие между собой, «фиксируем договорённости» поведения каждого из них.
Клиент-серверная архитектура описывает, как взаимодействуют между собой 
клиент (в нашем случае фронтенд) и сервер (бэкенд).

4.1 Клиент - Роль клиента для СЕРВЕРА в том, чтобы сообщить серверу, что нужно сделать с данными,
которые хранятся в базе, или с данными, которые он передаёт.
Роль клиента для ПОЛЬЗОВАТЕЛЯ в том, чтобы представить данные в удобном виде и предоставить
механизмы для их обновления.
Для веба клиент почти всегда браузер.
4.2 Сервер - Сервер принимает запросы от клиента.
Его роль в том, чтобы сохранять информацию от клиента в базе данных, обрабатывать её
и предоставлять к ней доступ по некоторым правилам. Такие правила обычно называются бизнес-логикой.
На сервере помимо общения с клиентом могут запускаться какие-то фоновые задачи, например,
индексирование информации в базе данных для более быстрого поиска, или запуск автоматических email-рассылок.
4.3 База данных - База данных (БД) — это хранилище всей пользовательской и служебной информации.
Её роль в том, чтобы обеспечивать быстрый и бесперебойный доступ к этой информации и собственно хранение.

5. AJAX (Asynchronous JavaScript and XML) — общение между клиентом и сервером без перезагрузки страницы.

6. Работа современного веб-приложения:
1. Клиент делает первичный запрос на сервер.
2. Сервер отвечает HTML-страницей, иногда с набором каких-то данных внедрённых в виде JS-объекта 
в конце страницы.
2.1 Страница может быть либо отрисована на сервере и тогда клиенту придёт готовый HTML.
2.2 Либо отрисовкой будет заниматься сам клиент с помощью какой-нибудь библиотеки, например, React.
В этом случае от сервера приходит просто набор необходимых данных.
3. Пользователь совершает какое-то действие, например, просит отсортировать таблицу.
4. Клиент в ответ на это действие решает, какой запрос отправить на сервер, строит этот запрос и отправляет его.
5. Сервер принимает этот запрос, обрабатывает его и отправляет на клиент порцию новых данных.
6. Клиент принимает данные и перерисовывает часть страницы по ним сам.
 То есть он уже не заменяет один кусок разметки другим готовым, а рисует разметку сам.
