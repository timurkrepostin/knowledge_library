
1. Когда в браузере (программа-клиент), в который сервер отправляет HTML, CSS, JS файлы, производится запрос, запрос летит в центральный комутатор, после в DNS 
в котором по названию домена переводит в их уникальный ip адрес, и после прилетает на сам сервер, который дает ответ клиенту, проходя тот же путь в обратном порядке
2. Приведя аналогию дома, если Server - дом, то port - домофон. Если запустить на сервере два http сервера, то один может быть на 5005, второй на 5007
3. API, ключевое слово слово interface - элемент управления системой
4. EndPoint - API состоит из EndPoint'ов и при взаимодействии с каждым EndPoint'ом сервер отправляет определенный ответ
5. Отдать ответ значит отправить пакет данных состоящий из HTML, CSS, JS - файлов, подтянуть что-то из БД и отправить на клиент
6. Фронтенд - разработчики пишут файлы, которые в конечном итоге подхватит бэкенд и отправит клиенту при определенном запросе
7. Работа архитектуры на примере логина на абстрактном сайте:
- Отправляем url login, чтобы сервер поймал эндпоинт login, после чего он отправит набор HTML, CSS, JS -файлов, благодаря которым на клиенте отрисуется странице логина;
- После того, как заполнили форму и нажали кнопку логин, начинает работать скрипт валидации, чтобы проверить все ли в норме, если все ок - 
срабатывает скрипт отправки запроса на сервер в эндпоинт loginUser
- Запрос при логине производится методом POST, поэтому скрипт формирует JSON-файл с данными пользователя, который кладется в body тела запроса, в HEAD указывается EndPoint
- На сервер приходит запрос в EndPoint loginUser, забирается логин и пароль и происходит следующая логика
  - Запрос с логином с сервера отправляется в базу данных с сервера, база дает ответ, происходит идентификация, что такой пользователь в системе есть
  - Далее проверяется пароль, тот ли это user, происходит аутентификация, когда подтверждается
  - Проверяется этот user может в системе и что ему можно (права пользователя), это авторизация
- После того, как три фактора сошлись, сервер отправляет ответ пользователю со страницей личного кабинета, данные личного кабинета подтягиваются из БД
- Пользователь получает доступ к личному кабинету со всеми своими личными данными и пропуск - токен, являющийся уникальным идентификатором залогининого пользователя 
- Когда пользователь, решит что-то проверить по личному кабинету, при отправке запроса на это будет прикладываться токен, который обрабатывает сервер
  есть ли права на данное действие у пользователя, токен может закладываться в куки
8. Сервер в какой-то момент может стать клиентом, отправляя запросы по определенным EndPoint на 3rd-party 