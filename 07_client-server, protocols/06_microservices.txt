** https://doka.guide/tools/microservices/
Микросервис — это отдельное приложение, как правило, очень небольшое, которое
поддерживает ограниченную функциональность. С помощью программного интерфейса (API)
такое приложение встраивается практически в любой продукт и может работать в составе
разных продуктов одновременно. Микросервисы часто противопоставляют монолитам, крупным
приложениям, которые полностью реализуют большой набор функций. Особенностью монолитов
является глубокое зацепление разных частей приложения и, как следствие, худшие
характеристики масштабируемости в сравнении с микросервисами.
Например, приложение, которое рассылает письма по списку адресов электронной почты,
или приложение, которое проводит аутентификацию пользователей, или приложение,
которое отслеживает активность пользователей в сервисе, — отличные кандидаты,
чтобы стать микросервисами. Можно повторять разработку похожего набора функций
для нового продукта, а можно реализовать и отладить микросервис или несколько
микросервисов, которые будут работать корректно для любого приложения.
Традиционно существовала концепция приложения, которое полностью решает все задачи
программного продукта — монолит. В эпоху быстрого развития рынка IT стало важным
уменьшить показатель time-to-market — время доведения до потребителя новой
функциональности или продукта. 
Практика разбиения программ на модули, которые можно переиспользовать в других программах,
оказалась успешной. Сначала на стороне сервера (бэкенд), потом и на стороне клиента
(фронтенд), части приложения стали выносить не только в отдельные модули, но и в
отдельные самостоятельные программы. Это позволило переиспользовать прошедшую проверку
временем функциональность в новых продуктах. Так и пришли к новому понятию — микросервис.

Плюсы микросервисов:
● Можно использовать тот стек технологий, который больше всего подходит для решения
поставленной задачи.
● Проще и дешевле разрабатывать набор микросервисов, в сравнении с разработкой
большого приложения.
● Поддерживать микросервисы намного проще и дешевле, чем поддерживать большое приложение.
● Не приходится каждый раз отлаживать работу для новых продуктов.
● Легко масштабировать приложение, построенное как совокупность микросервисов.
● Отказ одного сервиса не приводит к остановке системы в целом. Когда же ошибка
исправлена, необходимое изменение можно развернуть только для соответствующего
сервиса — вместо повторного развертывания всего приложения.
● Есть возможность использовать разные подходы к тестированию и доработки
каждого микросервиса.

Минусы микросервисов:
● Нужно поддерживать контракт — формализацию возможностей и условий взаимодействия
с микросервисом.
● Должна быть достаточно высокой квалификация разработчиков и инженеров по инфраструктуре.
● Микросервис должен минимально зависеть от контекста использования, не всегда это возможно.
● Могут возникать коллизии при обращении к одним и тем же сервисам: к базе данных,
к оперативной памяти, к диску, к процессору и прочим ресурсам.
● Сложно поддерживать и тестировать большое количество микросервисов.
● Разрабатывать большое количество микросервисов иногда дороже разработки монолита.

Когда применять
● Нужно держать высокую нагрузку. Проблемы пикового трафика легко решаются с помощью
микросервисов, существуют готовые решения и облачные сервисы, которые обеспечивают
автомасштабирование приложения. Сервисы добавляют ресурсы нагруженным микросервисам
или создают копии.
● Выросла команда разработки. Команда уже больше 10-15 человек и постоянно растёт,
новичков становится сложнее погружать во все тонкости разработки. Микросервисы могут
упростить командную работу и привести к единому набору стандартов разработки.
● В приложении появилось много модулей. Модулей уже несколько десятков, они достаточно
автономны, перевод их в микросервисы позволит легче масштабировать приложение
в будущем или переиспользовать при разработке новых продуктов.
● Стало очень много кода. Если приложение становится очень большим, то разбиение на
микросервисы упростит его поддержку и развитие.
● Нужно загружать приложение быстрее. Если приложение запускается несколько минут,
микросервисы позволят оптимизировать загрузку и применить масштабирование для
непроизводительных или высоконагруженных частей программы. Кроме этого, разработчики
тоже не будут ждать длительной сборки приложения и его загрузки на этапе отладки.
● Нужно использовать ресурсы компьютера оптимально. Модули могут обращаться к сети,
к памяти или к процессору неравномерно. Применение микросервисов позволит
оптимизировать этот компонент в работе приложения.
● Нужно быстро выводить новые продукты на рынок. Нужно обеспечить минимальное время
выхода на рынок новых продуктов и новых функций для уже существующих, микросервисы
обеспечат максимальную скорость развёртывания.

https://mcs.mail.ru/blog/prostym-jazykom-o-mikroservisnoj-arhitekture
Микросервисы и SOA не одно и то же. К SOA относится множество других шаблонов,
среди которых: CORBA, web-сервисы, очереди сообщений, ESB. Поэтому микросервисы стоит
воспринимать как конкретный подход к SOA, но не единственный.
Рассмотрим для примера типичный интернет-магазин. Монолитное приложение для него будет
использовать наверняка знакомую вам трехуровневую архитектуру, включающую:
1. пользовательский интерфейс;
2. серверную часть, отвечающую за бизнес-логику приложения и доступ к данным;
3. базу данных.
Мы видим, что бизнес-функции приложения очень разнообразны: работа с каталогом товаров
и корзиной, обработка заказов, их оплата и отслеживание статуса, ведение пользователей
и так далее. Но на уровне приложения все они объединены в один монолитный блок.
При разворачивании код для различных функций находится на одном сервере.
Чтобы масштабировать приложение, вам необходимо запустить несколько его экземпляров
на различных физических серверах.
Если монолитное приложение проще всего сравнить с кирпичной кладкой, то микросервисы
похожи на всем знакомый конструктор Lego. У вас есть множество деталей с четкими
стандартными границами для соединения друг с другом. Вы всегда можете пересобрать
получившееся изделие, заменив или убрав какие-то из элементов без ущерба для остальных.
Каждый из сервисов отвечает за конкретную бизнес-задачу, имеет собственное хранилище
данных и общается с другими сервисами через простые API-интерфейсы для решения более
сложных задач. Так, в нашем примере можно выделить микросервисы по ведению каталога
товаров, работе с корзиной, оформлению заказов, оплате и так далее.

https://cloud.yandex.ru/blog/posts/2022/03/microservice-architecture
Какие инструменты использовать для создания микросервисов и работы с ними
1. Один из самых популярных способов создавать микросервисы — платформа контейнеризации
Docker. С его помощью приложение отделяется от инфраструктуры: это значит, что вы
сможете беспроблемно перемещаться между облачным и локальным хранилищем.
2. Чтобы оркестрировать контейнеры, то есть управлять работой с ними, чаще всего
используют кластеры Kubernetes.
3. Неотъемлемая часть любого микросервисного проекта — балансировщик.
Именно благодаря ему такую архитектуру считают более устойчивой к отказам,
чем монолитную: он контролирует, чтобы нагрузка на приложение распределялась по
облачным ресурсам равномерно.
