** Основные виды тестирования ПО
● Тип тестирования (test type): Совокупность тестирующих действий, которая фокусируется
на определенных показателях качества. (ГОСТ 56920) Прим.: в русскоязычной среде это “вид”.
● Функциональные виды («Что?» - проверяет весь функционал продукта):
Функциональное тестирование (Functional testing)
Тестирование взаимодействия (Interoperability testing)
● Нефункциональное («Как?»):
Производительности (Performance)
Тестирование емкости (Capacity testing)
Нагрузочное (Load testing)
Стрессовое (Stress testing)
Масштабируемости (Scalability test)
Объемное тестирование (Volume testing)
Выносливости (Soak/Endurance testing)
Устойчивости (Resilience testing)
Стабильности/надежности (Stability / Reliability testing)
Отказ и восстановление (Failover and Recovery testing)
Эталонное и тестирование базовой версии (Benchmark and Baseline Testing)
Тестирование безопасности (Security and Access Control testing)
Удобство пользования (Usability testing)
Тестирование доступности (Accessibility testing)
Тестирование установки (Installation testing)
Тестирование на соответствие (Conformance/Compliance testing)
Конфигурационное (Configuration testing)
Тестирование локализации, глобализации и интернационализации
Связанное с изменениями:
Регрессионное (Regression testing)
Тест работоспособности (Sanity testing)
Дымовое (Smoke testing)

** Функциональное тестирование (Functional/Behavioral testing)
Функциональное тестирование (functional testing): Тестирование, основанное на анализе
спецификации функциональности компонента или системы. 
Основные виды функционального тестирования:
1. Unit Testing: модульное тестирование обычно выполняется разработчиком и влечет за
собой написание тестов, которые будут вызывать методы в каждом модуле и проверять их,
передавая требуемые параметры и проверяя соответствие возвращаемого значения ожидаемому.
Покрытие кода - важная часть модульного тестирования, где должны существовать test cases,
охватывающие:
1.1 Line coverage;
1.2 Code path coverage;
1.3 Method coverage;
5. Smoke Testing: тестирование, которое проводится после выпуска каждой сборки. Это также
называется build verification testing;
6. Sanity Testing: тестирование, которое проводится для того, чтобы убедиться, что все
основные и жизненно важные функции приложения / системы работают правильно. Обычно это
делается после Smoke Testing;
7. Regression Tests: тестирование проводится для того, чтобы убедиться, что добавление
нового кода, улучшений, исправление ошибок не нарушает существующую функциональность или
не вызывает нестабильности и ПО все еще работает в соответствии со спецификациями.
Регрессионные тесты не должны быть такими обширными, как фактические функциональные тесты,
но должны гарантировать объем покрытия, подтверждающий стабильность функциональности;
8. Integration Tests: когда система полагается на несколько функциональных модулей,
которые работают по отдельности, но должны работать согласованно когда объединены вместе,
чтобы достичь сквозного сценария, проверка таких сценариев называется интеграционным
тестированием;
9. Beta/Usability Testing: продукт демонстрируется реальному пользователю в среде,
приближенной к проду, и они тестируют продукт. Это похоже на User Acceptance testing;
10. System testing: тестирование, которое выполняется для всей системы, чтобы проверить,
работает ли она должным образом после интеграции всех модулей или компонентов;
11. End to end testing: проводится для проверки функциональности продукта. Это тестирование
выполняется только после завершения тестирования системной интеграции, включая
функциональные и нефункциональные требования;

** Нефункциональное тестирование (Non-Functional testing)
Нефункциональное тестирование проводится для проверки нефункциональных требований
приложения, таких как производительность, безопасность, совместимость, надежность,
удобство использования и т. д. В большинстве случаев это выполняется методом black box
testing. Оно проверяет, соответствует ли поведение системы требованиям по всем аспектам,
не охваченные функциональным тестированием.

Виды нефункционального тестирования (список не полный):
Тестирование производительности (Performance Testing)
Нагрузочное тестирование (Load Testing)
Стрессовое тестирование (Stress Testing)
Объемное тестирование (Volume Testing)
Тестирование восстановления (Recovery Testing)
Тестирование отказоустойчивости (Failover Testing)
Тестирование эффективности (Efficiency Testing)
Тестирование аварийного восстановления (Disaster Recovery Testing)
Тестирование установки (Installation Testing)
Тестирование документации (Documentation Testing)
Тестирование на удобство использования (Usability Testing)
Тестирование графического интерфейса пользователя (User Interface Testing)
Тестирование совместимости (Compatibility Testing)
Тестирование обслуживаемости (Maintainability Testing)
Тестирование безопасности (Security Testing)
Тестирование масштабируемости (Scalability Testing)
Тестирование выносливости (Endurance Testing)
Тестирование надежности (Reliability Testing)
Тестирование соответствия (Compliance Testing)
Тестирование локализации (Localization Testing)
Тестирование интернационализации (Internationalization Testing)
Тестирование переносимости (Portability Testing)
Тестирование на основе базового уровня (Baseline Testing)

Примеры чек-листов:
● Тестирование производительности:
1. Время отклика (The response time) приложения, то есть сколько времени требуется для
загрузки приложения, за какое время любой ввод, предоставленный приложению, обеспечивает
вывод, время обновления браузера и т. д.;
2. Пропускную способность (Throughput) следует проверять по количеству транзакций,
завершенных во время нагрузочного теста;
3. Настройка среды (Environment) должна быть такой же, как и в реальной среде, иначе
результаты не будут такими же;
4. Время процесса (Process time) - такие действия, как импорт и экспорт Excel, любые
вычисления в приложении должны быть протестированы;
5. Совместимость (Interoperability) должна быть проверена, т.е. программное обеспечение
должно иметь возможность взаимодействовать с другим программным обеспечением или системами;
6. Необходимо проверить время ETL, то есть время, затраченное на извлечение,
преобразование и загрузку данных из одной базы данных в другую;
7. Необходимо проверить возрастающую нагрузку (Load) на приложение;

● Тестирование безопасности:
1. Аутентификация (Authentication): только достоверный пользователь может войти в систему;
2. Авторизация (Authorized): пользователь должен иметь возможность входить в те модули,
для которых он авторизован или к которым пользователю был предоставлен доступ;
3. Пароль: Требование пароля должно быть подтверждено, т.е. пароль должен соответствовать
тому, как это требование определяется, то есть длине, специальным символам, числам и т. д.;
4. Тайм-аут: если приложение неактивно, оно должно истечь по таймауту в указанное время;
5. Резервное копирование данных: резервное копирование данных должно быть выполнено
в указанное время и данные должны быть скопированы в безопасное место;
6. Внутренние ссылки на веб-приложение не должны быть доступны, если размещены
непосредственно в браузере;
7. Вся коммуникация должна быть зашифрована;

** Тестирование производительности (Performance testing)
Тестирование производительности - это нефункциональный вид тестирования программного
обеспечения, используемый для проверки скорости, времени отклика, стабильности, надежности,
масштабируемости и использования ресурсов программного приложения при определенной рабочей
нагрузке, обычно регрессионным образом, когда в приложение ежедневно или еженедельно
вносятся небольшие изменения. Основная цель тестирования производительности - выявить
и устранить узкие места производительности в программном приложении. Это подмножество
performance engineering, также известное как «Perf Testing». Само по себе оно не призвано
находить дефекты, но оно помогает в обнаружении узких мест в системе.

Все подвиды тестирования производительности отличаются, грубо говоря,
только параметрами (тип возрастания нагрузки, ее количество, длительность и т.п.) и
собираемыми метриками (без которых это тестирование бессмысленно). Точкой отсчета для
всех подвидов принято брать результаты Capacity testing.

Общие проблемы с производительностью.
Большинство проблем с производительностью связаны со скоростью, временем отклика,
временем загрузки и плохой масштабируемостью. Скорость часто является одним из самых
важных атрибутов приложения. Медленно работающее приложение потеряет потенциальных
пользователей. Тестирование производительности проводится для того, чтобы убедиться,
что приложение работает достаточно быстро, чтобы удерживать внимание и интерес пользователя.

Тестирование производительности клиентской части и серверной, в чем разница?
Оценка скорости работы клиентской и серверной частей веб-приложения осуществляется двумя
разными видами тестирования: для Frontend применяется тестирование клиентской части,
или Client-Side testing, а для Back-end - тестирование серверной части.
Основная цель тестирования клиентской части состоит в измерении времени, необходимого
браузеру для загрузки HTML-страницы. Наиболее важными показателями здесь являются
количество загружаемых данных, их объем, а также количество выполненных запросов.
Собрать данную статистику можно как с использованием встроенных инструментов браузера
(DevTools), так и с помощью специализированных инструментов и онлайн-сервисов, которые
позволяют замерить необходимые показатели с учетом интересующего региона.

Тестирование серверной части направлено на анализ выполнения запросов и получения
соответствующего ответа от Back-end.
● Цели данного вида тестирования:
Измерить время отклика самых важных бизнес-транзакций;
Определить предельный уровень допустимой нагрузки;
Выявить «узкие» места в производительности системы;
Составить рекомендации по улучшению производительности;
Найти возможные дефекты, проявляющиеся только при одновременной работе большого
количества пользователей.

** Тестирование емкости (Capacity testing)
Тестирование потенциальных возможностей (capacity testing): Тип тестирования уровня
производительности для оценки уровня, при котором с увеличением нагрузки
(числа пользователей, транзакций, элементов данных и т.д.) элемент тестирования
подвергается угрозе не обеспечивать требуемую производительность. (ГОСТ 56920)
Capacity - базовый тест, который обычно выполняется первым. Все последующие тесты на
среднее время ответа, регенерацию системы, утилизацию ресурсов нужно выполнять с оглядкой
на результаты Capacity.
Тестирование емкости гарантирует, что приложение и среда могут беспрепятственно
обрабатывать максимальное количество пользователей или транзакций в соответствии
с требованиями к производительности, определенными в вашем соглашении об уровне
обслуживания (SLA). Тестирование емкости нацелено на тестирование максимальной емкости
вашей системы с точки зрения трафика, при этом обеспечивая оптимальное взаимодействие
с пользователем. 

** Нагрузочное тестирование (Load testing)
● Нагрузочное тестирование (load testing): Вид тестирования производительности, проводимый
с целью оценить поведение компонента или системы под увеличивающейся нагрузкой (число
одновременно работающих пользователей и/или число транзакций) для определения максимально
допустимого уровня нагрузки для исследуемого компонента или системы. (ISTQB)
● Нагрузочное тестирование (load testing): Тип тестирования уровня производительности,
проводимого для оценки поведения элемента тестирования при ожидаемых условиях переменной
нагрузки, обычно для ожидаемых условий низкого, типичного и пикового использования.
● Нагрузочное тестирование - это тестирование, имитирующее работу определенного количества
бизнес пользователей на каком-либо общем (разделяемом ими) ресурсе. Этот подвид
тестирования производительности выполняется для диагностики поведения системы при
увеличении рабочей нагрузки.

** Стрессовое тестирование (Stress testing)
● Стрессовое тестирование (stress testing): Вид тестирования производительности,
оценивающий систему или компонент на граничных значениях рабочих нагрузок или за их
пределами, или же в состоянии ограниченных ресурсов, таких как память или доступ к серверу.
● Стрессовое тестирование (stress testing): Тип тестирования уровня производительности,
проводимого для оценки поведения элемента тестирования при условиях загрузки, выше
ожидаемой или указанной в требованиях к производительности, или при доступности ресурсов,
ниже минимальной, указанной в требованиях. 
● Стрессовое тестирование выполняется самым первым, если нет отдельного Capacity
тестирования, хотя по факту это все равно будет Capacity, т.к. нагрузка берется
«с потолка». Стресс-тестирование - это отрицательное / негативное тестирование, которые
проводят при больших нагрузках или нагрузках, выходящих за допустимые пределы, чтобы
определить поведение системы при таких обстоятельствах, точку отказа системы (числовые
показатели метрик), показываются ли корректные ошибки при этом и не теряются ли данные. 

**Тестирование масштабируемости (Scalability testing)
Тестирование масштабируемости проводится для определения способности приложения
масштабироваться с точки зрения пользовательской нагрузки, количества транзакций, объема
данных и т. д. Цель теста масштабируемости отличается от стрессового или нагрузочного
тестирования. Например, компания ожидает шестикратного увеличения нагрузки на серверы
в течение следующих двух месяцев. Им может потребоваться увеличить производительность
сервера и сократить время обработки запроса, чтобы лучше обслуживать посетителей.
Если приложение масштабируемое, вы можете сократить это время, обновив оборудование
сервера, например, вы можете увеличить частоту ЦП и добавить больше ОЗУ. Также вы можете
улучшить производительность запросов, изменив программное обеспечение сервера, например,
заменив хранилища данных в текстовых файлах базами данных SQL Server. Чтобы найти лучшее
решение, вы можете сначала протестировать изменения оборудования, затем изменения
программного обеспечения, а затем сравнить результаты тестов.

** Объемное тестирование (Volume testing)
Объемное тестирование (volume testing): Тип тестирования уровня производительности,
проводимого для оценки способности элемента тестирования обработать определенные объемы
данных (обычно равных или близких к максимальным указанным потенциальным возможностям)
с точки зрения потенциальных возможностей пропускной способности, емкости памяти или того
и другого. (ГОСТ 56920)
Объемное тестирование (также flood testing) предназначено для прогнозирования того,
может ли система / приложение обрабатывать большой объем данных в плане проверки объема
данных, обрабатываемых базой данных. Это тестирование сосредоточено на наполнении БД
продукта в реальных сценариях использования, отслеживании производительности приложения
при различных объемах БД. 

** Тестирование выносливости/стабильности (Endurance/Soak/Stability testing)
Тестирование износостойкости (endurance testing): Тип тестирования уровня
производительности для определения того, может ли элемент тестирования постоянно
выдерживать требуемую нагрузку в течение установленного периода времени. (ГОСТ 56920)
Тестирование на выносливость (, оно же , , ) включает в себя тестирование системы со
значительной нагрузкой в ​​течение длительного периода времени, чтобы выяснить, как система
ведет себя при длительном использовании. То есть для обеспечения того, чтобы
производительность и / или время отклика после некоторого длительного периода устойчивой
активности были не хуже, чем в начале теста. В основном используется для проверки утечек
памяти, времени отклика, правильности подключения и закрытия подключения к модулям
(например, БД) и т.п. Обычно продолжительность испытания на выносливость составляет 6-8 часов;

** Тестирование устойчивости (Resilience testing)
Тестирование устойчивости направлено на обеспечение хорошей работы приложений в реальных
или хаотичных условиях. Другими словами, оно проверяет отказоустойчивость приложения
или способность противостоять стрессовым или сложным факторам, а также включает в себя
тестирование на соответствие (compliance), выносливость (endurance), нагрузочное
тестирование и тестирование восстановления (recovery testing). Эту форму тестирования
иногда также называют chaos engineering. Поскольку отказов невозможно избежать,
тестирование устойчивости гарантирует, что программное обеспечение может продолжать
выполнять основные функции и избежать потери данных даже в критических условиях, например,
при сбое сети, отказе базы данных, при необходимости выдавая соответствующие сообщения
об ошибках.

** Тестирование надежности (Reliability Testing)
Надежность (reliability): Способность программного продукта функционировать при заданных
условиях на протяжении определенного периода времени, или для определенного количества
операций. (ISO 9126)
Надежность (Reliability) - это «вероятность безотказной работы программного обеспечения
в течение определенного периода времени в определенной среде», т.е. это результат,
к которому стремятся разработчики, способом достижения которого является устойчивость.
Тестирование надежности связано с качеством программного обеспечения и стандартизацией
продуктов. Если мы можем повторять тест-кейсы и постоянно получать один и тот же результат,
то продукт считается «надежным». Тестирование надежности выполняется, чтобы убедиться,
что программное обеспечение надежно, соответствует цели, для которой оно создано, и в
течение определенного периода времени в данной среде способно обеспечить безотказную работу.
Тестирование надежности может включать в себя Feature Testing, Security testing,
Load Testing, Regression Testing и др.

** Тестирование на отказ и восстановление (Failover and Recovery testing)
Тестирование отказоустойчивости (failover testing): Тестирование при помощи эмуляции
отказов системы или реально вызываемых отказов в управляемом окружении. После вызванного
отказа проверяется механизм отказоустойчивости с целью удостовериться, что данные не 
отеряны или не испорчены, и достигнут оговоренный уровень обслуживания (например,
доступности функций или время отклика) (ISTQB).
Тестирование на отказ и восстановление (Failover and Recovery testing, Disaster Recovery
Testing) - подвид тестирования производительности, проверяет тестируемый продукт с точки
зрения способности противостоять и успешно восстанавливаться после возможных сбоев,
возникших в связи с ошибками ПО, отказами оборудования или проблемами связи/сети. 

** Эталонное и базовое тестирование (Benchmark and Baseline Testing)
● Эталонный тест (benchmark test):
(1) стандарт, согласно которому может производиться измерение или сравнение.
(2) тест, который может использоваться для сравнения компонентов или систем друг с другом
или на соответствие стандарту, указанному в (1). (IEEE 610)
Базовая версия (baseline): Спецификация или программный продукт, который был формально
отрецензирован или согласован, впоследствии используется как базовая версия для дальнейшей
разработки, и который может быть изменен только в процессе формального контроля процесса
изменений. (IEEE 610)
● Эталонное тестирование (Benchmark Testing) - это набор стандартов, метрик или контрольных
точек (reference point), по которым оценивается (assessed or evaluated) качество работы
продукта или услуги, через нагрузочное тестирование модуля или всей комплексной
программной системы для определения ее производительности. Оно определяет повторяемый
набор экспериментальных результатов, которые помогают определить функциональные
возможности как для текущих, так и для будущих выпусков программного обеспечения.
● Тестирование базовой версии (Baseline Testing) - это подход к тестированию, в котором
за точку отсчета берется базовая линия - это показатель конкретного ориентира, который
служит основой для нового тестирования. В Baseline Testing тесты прогоняют, сохраняют
все результаты и сравнивают с базовым уровнем. Этот базовый уровень относится к последним
принятым результатам испытаний. Если в исходном коде есть новые изменения, то для
повторного выполнения тестов необходимо сформировать текущий базовый уровень. Если
последние результаты будут приняты, то текущая базовая линия станет базовой.

** Тестирование хранилища (Storage testing)
Тестирование хранилища (Storage testing, Storage Performance testing) - это вид
тестирования ПО, используемого для проверки того, как тестируемое ПО хранит данные в
соответствующих каталогах и достаточно ли в них места для предотвращения неожиданного
завершения работы из-за недостатка места на диске. ПО должно обрабатывать такие
исключения и отображать предупреждающее сообщение для пользователя.

Зачем оно нужно?
1. Медленное хранилище означает медленное время отклика, длительные запросы и более
низкую доступность (availability) приложений;
2. Медленное хранилище - это накладные расходы на обслуживание серверной инфраструктуры;
3. Помогает найти практические ограничения хранилища перед развертыванием;
4. Это помогает понять, как система отреагирует на замену или обновление оборудования;

** Одновременное / многопользовательское тестирование (Concurrency/Multi-user testing)
Concurrency testing - это подвид нагрузочного тестирования, при котором проверяется
поведение системы (веб-приложение, веб-страница или API) в момент, когда одновременно
происходят два или более событий, или выполняется одновременный вход нескольких
пользователей в систему с выполнением одного и того же действия. Во время теста
наблюдаются и записываются определенные метрики, а также измеряется время отклика системы
в периоды устойчивой большой нагрузки. 
Зачем оно нужно:
1. Определяет влияние одновременного доступа к одним и тем же записям базы данных, модулям
или коду приложения;
2. Определяет и измеряет уровень взаимоблокировки, блокировки и использования однопоточного
кода и ограничения доступа к общим ресурсам;

** Тестирование сервиса (Service Testing)
Качество обслуживания, предоставляемого веб-приложением, может быть определено включением
всех его атрибутов, таких как функциональность, производительность, надежность, удобство
использования, безопасность и так далее. Однако для наших целей здесь мы выделяем три
конкретные задачи обслуживания (?service objectives), которые подвергаются тщательной
проверке в рамках того, что мы называем «?тестированием услуг»:
Performance;
Reliability;
Manageability;
Во всех трех случаях нам необходимо моделировать пользовательскую нагрузку для
эффективного проведения тестов. Цели производительности, надежности и управляемости
существуют в контексте реальных клиентов, использующих сайт для бизнеса. Скорость отклика
(в данном случае время, необходимое одному системному узлу для ответа на запрос другого)
сайта напрямую зависит от ресурсов, доступных в технической архитектуре. Чем больше
клиентов используют эту услугу, тем меньше технических ресурсов доступно для обслуживания
запросов каждого пользователя, и время отклика сокращается.

** Тестирование безопасности (Security and Access Control testing)
Это тип тестирования ПО, который выявляет уязвимости, угрозы и риски. Целью тестов
безопасности является выявление всех возможных лазеек и слабых мест в ПО, которые могут
привести к потере информации, доходов, репутации компании, сотрудников или клиентов.
● Общая стратегия безопасности основывается на трех основных принципах:
1. Конфиденциальность - сокрытие определенных ресурсов или информации;
2. Целостность - ресурс может быть изменен только в соответствии с полномочиями пользователя;
3. Доступность - ресурсы должны быть доступны только авторизованному пользователю, внутреннему объекту или устройству;
Тестирование безопасности обычно выполняет отдельный специалист по безопасности. В ходе тестирования безопасности испытатель играет роль взломщика. Ему разрешено все:
1. попытки узнать пароль с помощью внешних средств;
2. атака системы с помощью специальных утилит, анализирующих защиты;
3. перегрузка системы (в надежде, что она откажется обслуживать других клиентов);
4. целенаправленное введение ошибок в надежде проникнуть в систему в ходе восстановления;
5. просмотр несекретных данных в надежде найти ключ для входа в систему;

** Оценка уязвимости/защищенности (Vulnerability Assessment)
● Уязвимость - это любые ошибки или недостатки в процедурах безопасности системы,
разработке, реализации или любом внутреннем контроле, которые могут привести к нарушению
политики безопасности системы.
● Оценка уязвимости - это процесс оценки рисков безопасности в программной системе с целью
уменьшения вероятности угрозы. Целью оценки уязвимости является снижение возможности
несанкционированного доступа для злоумышленников (хакеров).
Анализ проникновения зависит от двух механизмов, а именно от оценки уязвимости и
тестирования на проникновение (VAPT - Vulnerability Assessment and Penetration testing).
● Классификация уязвимостей:
1. Уязвимость оборудования - это недостатки, возникающие из-за проблем с оборудованием,
таких как чрезмерная влажность, пыль и незащищенное хранение оборудования;
2. Уязвимость программного обеспечения. Недостаток в методике разработки проекта,
несоответствующее тестирование и отсутствие своевременного аудита активов приводят
к уязвимости программного обеспечения;
3. Уязвимость сети: из-за использования открытых сетевых подключений, незащищенной сетевой
архитектуры и слабого канала связи возникают проблемы этого типа;
4. Физическая уязвимость: если система расположена в зоне, подверженной сильному дождю,
наводнению, нестабильному электроснабжению и т. д., тогда она подвержена физической
уязвимости;
5. Уязвимость организации: эта уязвимость возникает из-за использования несоответствующих
инструментов безопасности, правил аудита и ошибок в административных действиях;

** Фаззинг-тестирование (Fuzz testing)
FUZZ testing (fuzzing) - это тип тестирования безопасности, который обнаруживает ошибки
кодирования и лазейки в программном обеспечении, операционных системах или сетях.
Фаззинг включает в себя ввод огромного количества случайных данных, называемых fuzz,
в тестируемое программное обеспечение, чтобы заставить его дать сбой или прорвать его
защиту. Фаззинг часто выявляет уязвимости, которые могут быть использованы с помощью
SQL-инъекции, переполнения буфера, отказа в обслуживании (DOS) и XSS. Fuzz-тестирование
выполняется с помощью фаззера - программы, которая автоматически вводит полуслучайные
данные в программу и обнаруживает ошибки. Fuzz-тестирование обычно выполняется
автоматически.
Обычно fuzzing обнаруживает наиболее серьезные ошибки или дефекты безопасности.
Это очень экономически эффективный метод тестирования. Fuzzing - один из самых
распространенных методов хакеров, используемых для обнаружения уязвимости системы
(сюда относятся популярные SQL- или скриптовые инъекции).
