** Основные виды тестирования ПО
● Тип тестирования (test type): Совокупность тестирующих действий, которая фокусируется
на определенных показателях качества. (ГОСТ 56920) Прим.: в русскоязычной среде это “вид”.
● Функциональные виды («Что?» - проверяет весь функционал продукта):
Функциональное тестирование (Functional testing)
Тестирование взаимодействия (Interoperability testing)
● Нефункциональное («Как?»):
Производительности (Performance)
Тестирование емкости (Capacity testing)
Нагрузочное (Load testing)
Стрессовое (Stress testing)
Масштабируемости (Scalability test)
Объемное тестирование (Volume testing)
Выносливости (Soak/Endurance testing)
Устойчивости (Resilience testing)
Стабильности/надежности (Stability / Reliability testing)
Отказ и восстановление (Failover and Recovery testing)
Эталонное и тестирование базовой версии (Benchmark and Baseline Testing)
Тестирование безопасности (Security and Access Control testing)
Удобство пользования (Usability testing)
Тестирование доступности (Accessibility testing)
Тестирование установки (Installation testing)
Тестирование на соответствие (Conformance/Compliance testing)
Конфигурационное (Configuration testing)
Тестирование локализации, глобализации и интернационализации
Связанное с изменениями:
Регрессионное (Regression testing)
Тест работоспособности (Sanity testing)
Дымовое (Smoke testing)

** Функциональное тестирование (Functional/Behavioral testing)
Функциональное тестирование (functional testing): Тестирование, основанное на анализе
спецификации функциональности компонента или системы. 
Основные виды функционального тестирования:
1. Unit Testing: модульное тестирование обычно выполняется разработчиком и влечет за
собой написание тестов, которые будут вызывать методы в каждом модуле и проверять их,
передавая требуемые параметры и проверяя соответствие возвращаемого значения ожидаемому.
Покрытие кода - важная часть модульного тестирования, где должны существовать test cases,
охватывающие:
1.1 Line coverage;
1.2 Code path coverage;
1.3 Method coverage;
5. Smoke Testing: тестирование, которое проводится после выпуска каждой сборки. Это также
называется build verification testing;
6. Sanity Testing: тестирование, которое проводится для того, чтобы убедиться, что все
основные и жизненно важные функции приложения / системы работают правильно. Обычно это
делается после Smoke Testing;
7. Regression Tests: тестирование проводится для того, чтобы убедиться, что добавление
нового кода, улучшений, исправление ошибок не нарушает существующую функциональность или
не вызывает нестабильности и ПО все еще работает в соответствии со спецификациями.
Регрессионные тесты не должны быть такими обширными, как фактические функциональные тесты,
но должны гарантировать объем покрытия, подтверждающий стабильность функциональности;
8. Integration Tests: когда система полагается на несколько функциональных модулей,
которые работают по отдельности, но должны работать согласованно когда объединены вместе,
чтобы достичь сквозного сценария, проверка таких сценариев называется интеграционным
тестированием;
9. Beta/Usability Testing: продукт демонстрируется реальному пользователю в среде,
приближенной к проду, и они тестируют продукт. Это похоже на User Acceptance testing;
10. System testing: тестирование, которое выполняется для всей системы, чтобы проверить,
работает ли она должным образом после интеграции всех модулей или компонентов;
11. End to end testing: проводится для проверки функциональности продукта. Это тестирование
выполняется только после завершения тестирования системной интеграции, включая
функциональные и нефункциональные требования;

** Нефункциональное тестирование (Non-Functional testing)
Нефункциональное тестирование проводится для проверки нефункциональных требований
приложения, таких как производительность, безопасность, совместимость, надежность,
удобство использования и т. д. В большинстве случаев это выполняется методом black box
testing. Оно проверяет, соответствует ли поведение системы требованиям по всем аспектам,
не охваченные функциональным тестированием.

Виды нефункционального тестирования (список не полный):
Тестирование производительности (Performance Testing)
Нагрузочное тестирование (Load Testing)
Стрессовое тестирование (Stress Testing)
Объемное тестирование (Volume Testing)
Тестирование восстановления (Recovery Testing)
Тестирование отказоустойчивости (Failover Testing)
Тестирование эффективности (Efficiency Testing)
Тестирование аварийного восстановления (Disaster Recovery Testing)
Тестирование установки (Installation Testing)
Тестирование документации (Documentation Testing)
Тестирование на удобство использования (Usability Testing)
Тестирование графического интерфейса пользователя (User Interface Testing)
Тестирование совместимости (Compatibility Testing)
Тестирование обслуживаемости (Maintainability Testing)
Тестирование безопасности (Security Testing)
Тестирование масштабируемости (Scalability Testing)
Тестирование выносливости (Endurance Testing)
Тестирование надежности (Reliability Testing)
Тестирование соответствия (Compliance Testing)
Тестирование локализации (Localization Testing)
Тестирование интернационализации (Internationalization Testing)
Тестирование переносимости (Portability Testing)
Тестирование на основе базового уровня (Baseline Testing)

Примеры чек-листов:
● Тестирование производительности:
1. Время отклика (The response time) приложения, то есть сколько времени требуется для
загрузки приложения, за какое время любой ввод, предоставленный приложению, обеспечивает
вывод, время обновления браузера и т. д.;
2. Пропускную способность (Throughput) следует проверять по количеству транзакций,
завершенных во время нагрузочного теста;
3. Настройка среды (Environment) должна быть такой же, как и в реальной среде, иначе
результаты не будут такими же;
4. Время процесса (Process time) - такие действия, как импорт и экспорт Excel, любые
вычисления в приложении должны быть протестированы;
5. Совместимость (Interoperability) должна быть проверена, т.е. программное обеспечение
должно иметь возможность взаимодействовать с другим программным обеспечением или системами;
6. Необходимо проверить время ETL, то есть время, затраченное на извлечение,
преобразование и загрузку данных из одной базы данных в другую;
7. Необходимо проверить возрастающую нагрузку (Load) на приложение;

● Тестирование безопасности:
1. Аутентификация (Authentication): только достоверный пользователь может войти в систему;
2. Авторизация (Authorized): пользователь должен иметь возможность входить в те модули,
для которых он авторизован или к которым пользователю был предоставлен доступ;
3. Пароль: Требование пароля должно быть подтверждено, т.е. пароль должен соответствовать
тому, как это требование определяется, то есть длине, специальным символам, числам и т. д.;
4. Тайм-аут: если приложение неактивно, оно должно истечь по таймауту в указанное время;
5. Резервное копирование данных: резервное копирование данных должно быть выполнено
в указанное время и данные должны быть скопированы в безопасное место;
6. Внутренние ссылки на веб-приложение не должны быть доступны, если размещены
непосредственно в браузере;
7. Вся коммуникация должна быть зашифрована;

** Тестирование производительности (Performance testing)
Тестирование производительности - это нефункциональный вид тестирования программного
обеспечения, используемый для проверки скорости, времени отклика, стабильности, надежности,
масштабируемости и использования ресурсов программного приложения при определенной рабочей
нагрузке, обычно регрессионным образом, когда в приложение ежедневно или еженедельно
вносятся небольшие изменения. Основная цель тестирования производительности - выявить
и устранить узкие места производительности в программном приложении. Это подмножество
performance engineering, также известное как «Perf Testing». Само по себе оно не призвано
находить дефекты, но оно помогает в обнаружении узких мест в системе.

Все подвиды тестирования производительности отличаются, грубо говоря,
только параметрами (тип возрастания нагрузки, ее количество, длительность и т.п.) и
собираемыми метриками (без которых это тестирование бессмысленно). Точкой отсчета для
всех подвидов принято брать результаты Capacity testing.

Общие проблемы с производительностью.
Большинство проблем с производительностью связаны со скоростью, временем отклика,
временем загрузки и плохой масштабируемостью. Скорость часто является одним из самых
важных атрибутов приложения. Медленно работающее приложение потеряет потенциальных
пользователей. Тестирование производительности проводится для того, чтобы убедиться,
что приложение работает достаточно быстро, чтобы удерживать внимание и интерес пользователя.

Тестирование производительности клиентской части и серверной, в чем разница?
Оценка скорости работы клиентской и серверной частей веб-приложения осуществляется двумя
разными видами тестирования: для Frontend применяется тестирование клиентской части,
или Client-Side testing, а для Back-end - тестирование серверной части.
Основная цель тестирования клиентской части состоит в измерении времени, необходимого
браузеру для загрузки HTML-страницы. Наиболее важными показателями здесь являются
количество загружаемых данных, их объем, а также количество выполненных запросов.
Собрать данную статистику можно как с использованием встроенных инструментов браузера
(DevTools), так и с помощью специализированных инструментов и онлайн-сервисов, которые
позволяют замерить необходимые показатели с учетом интересующего региона.

Тестирование серверной части направлено на анализ выполнения запросов и получения
соответствующего ответа от Back-end.
● Цели данного вида тестирования:
Измерить время отклика самых важных бизнес-транзакций;
Определить предельный уровень допустимой нагрузки;
Выявить «узкие» места в производительности системы;
Составить рекомендации по улучшению производительности;
Найти возможные дефекты, проявляющиеся только при одновременной работе большого
количества пользователей.

** Тестирование емкости (Capacity testing)
Тестирование потенциальных возможностей (capacity testing): Тип тестирования уровня
производительности для оценки уровня, при котором с увеличением нагрузки
(числа пользователей, транзакций, элементов данных и т.д.) элемент тестирования
подвергается угрозе не обеспечивать требуемую производительность. (ГОСТ 56920)
Capacity - базовый тест, который обычно выполняется первым. Все последующие тесты на
среднее время ответа, регенерацию системы, утилизацию ресурсов нужно выполнять с оглядкой
на результаты Capacity.
Тестирование емкости гарантирует, что приложение и среда могут беспрепятственно
обрабатывать максимальное количество пользователей или транзакций в соответствии
с требованиями к производительности, определенными в вашем соглашении об уровне
обслуживания (SLA). Тестирование емкости нацелено на тестирование максимальной емкости
вашей системы с точки зрения трафика, при этом обеспечивая оптимальное взаимодействие
с пользователем. 

** Нагрузочное тестирование (Load testing)
● Нагрузочное тестирование (load testing): Вид тестирования производительности, проводимый
с целью оценить поведение компонента или системы под увеличивающейся нагрузкой (число
одновременно работающих пользователей и/или число транзакций) для определения максимально
допустимого уровня нагрузки для исследуемого компонента или системы. (ISTQB)
● Нагрузочное тестирование (load testing): Тип тестирования уровня производительности,
проводимого для оценки поведения элемента тестирования при ожидаемых условиях переменной
нагрузки, обычно для ожидаемых условий низкого, типичного и пикового использования.
● Нагрузочное тестирование - это тестирование, имитирующее работу определенного количества
бизнес пользователей на каком-либо общем (разделяемом ими) ресурсе. Этот подвид
тестирования производительности выполняется для диагностики поведения системы при
увеличении рабочей нагрузки.

** Стрессовое тестирование (Stress testing)
● Стрессовое тестирование (stress testing): Вид тестирования производительности,
оценивающий систему или компонент на граничных значениях рабочих нагрузок или за их
пределами, или же в состоянии ограниченных ресурсов, таких как память или доступ к серверу.
● Стрессовое тестирование (stress testing): Тип тестирования уровня производительности,
проводимого для оценки поведения элемента тестирования при условиях загрузки, выше
ожидаемой или указанной в требованиях к производительности, или при доступности ресурсов,
ниже минимальной, указанной в требованиях. 
● Стрессовое тестирование выполняется самым первым, если нет отдельного Capacity
тестирования, хотя по факту это все равно будет Capacity, т.к. нагрузка берется
«с потолка». Стресс-тестирование - это отрицательное / негативное тестирование, которые
проводят при больших нагрузках или нагрузках, выходящих за допустимые пределы, чтобы
определить поведение системы при таких обстоятельствах, точку отказа системы (числовые
показатели метрик), показываются ли корректные ошибки при этом и не теряются ли данные. 

**Тестирование масштабируемости (Scalability testing)
Тестирование масштабируемости проводится для определения способности приложения
масштабироваться с точки зрения пользовательской нагрузки, количества транзакций, объема
данных и т. д. Цель теста масштабируемости отличается от стрессового или нагрузочного
тестирования. Например, компания ожидает шестикратного увеличения нагрузки на серверы
в течение следующих двух месяцев. Им может потребоваться увеличить производительность
сервера и сократить время обработки запроса, чтобы лучше обслуживать посетителей.
Если приложение масштабируемое, вы можете сократить это время, обновив оборудование
сервера, например, вы можете увеличить частоту ЦП и добавить больше ОЗУ. Также вы можете
улучшить производительность запросов, изменив программное обеспечение сервера, например,
заменив хранилища данных в текстовых файлах базами данных SQL Server. Чтобы найти лучшее
решение, вы можете сначала протестировать изменения оборудования, затем изменения
программного обеспечения, а затем сравнить результаты тестов.

** Объемное тестирование (Volume testing)
Объемное тестирование (volume testing): Тип тестирования уровня производительности,
проводимого для оценки способности элемента тестирования обработать определенные объемы
данных (обычно равных или близких к максимальным указанным потенциальным возможностям)
с точки зрения потенциальных возможностей пропускной способности, емкости памяти или того
и другого. (ГОСТ 56920)
Объемное тестирование (также flood testing) предназначено для прогнозирования того,
может ли система / приложение обрабатывать большой объем данных в плане проверки объема
данных, обрабатываемых базой данных. Это тестирование сосредоточено на наполнении БД
продукта в реальных сценариях использования, отслеживании производительности приложения
при различных объемах БД. 

** Тестирование выносливости/стабильности (Endurance/Soak/Stability testing)
Тестирование износостойкости (endurance testing): Тип тестирования уровня
производительности для определения того, может ли элемент тестирования постоянно
выдерживать требуемую нагрузку в течение установленного периода времени. (ГОСТ 56920)
Тестирование на выносливость (, оно же , , ) включает в себя тестирование системы со
значительной нагрузкой в ​​течение длительного периода времени, чтобы выяснить, как система
ведет себя при длительном использовании. То есть для обеспечения того, чтобы
производительность и / или время отклика после некоторого длительного периода устойчивой
активности были не хуже, чем в начале теста. В основном используется для проверки утечек
памяти, времени отклика, правильности подключения и закрытия подключения к модулям
(например, БД) и т.п. Обычно продолжительность испытания на выносливость составляет 6-8 часов;

** Тестирование устойчивости (Resilience testing)
Тестирование устойчивости направлено на обеспечение хорошей работы приложений в реальных
или хаотичных условиях. Другими словами, оно проверяет отказоустойчивость приложения
или способность противостоять стрессовым или сложным факторам, а также включает в себя
тестирование на соответствие (compliance), выносливость (endurance), нагрузочное
тестирование и тестирование восстановления (recovery testing). Эту форму тестирования
иногда также называют chaos engineering. Поскольку отказов невозможно избежать,
тестирование устойчивости гарантирует, что программное обеспечение может продолжать
выполнять основные функции и избежать потери данных даже в критических условиях, например,
при сбое сети, отказе базы данных, при необходимости выдавая соответствующие сообщения
об ошибках.

** Тестирование надежности (Reliability Testing)
Надежность (reliability): Способность программного продукта функционировать при заданных
условиях на протяжении определенного периода времени, или для определенного количества
операций. (ISO 9126)
Надежность (Reliability) - это «вероятность безотказной работы программного обеспечения
в течение определенного периода времени в определенной среде», т.е. это результат,
к которому стремятся разработчики, способом достижения которого является устойчивость.
Тестирование надежности связано с качеством программного обеспечения и стандартизацией
продуктов. Если мы можем повторять тест-кейсы и постоянно получать один и тот же результат,
то продукт считается «надежным». Тестирование надежности выполняется, чтобы убедиться,
что программное обеспечение надежно, соответствует цели, для которой оно создано, и в
течение определенного периода времени в данной среде способно обеспечить безотказную работу.
Тестирование надежности может включать в себя Feature Testing, Security testing,
Load Testing, Regression Testing и др.

** Тестирование на отказ и восстановление (Failover and Recovery testing)
Тестирование отказоустойчивости (failover testing): Тестирование при помощи эмуляции
отказов системы или реально вызываемых отказов в управляемом окружении. После вызванного
отказа проверяется механизм отказоустойчивости с целью удостовериться, что данные не 
отеряны или не испорчены, и достигнут оговоренный уровень обслуживания (например,
доступности функций или время отклика) (ISTQB).
Тестирование на отказ и восстановление (Failover and Recovery testing, Disaster Recovery
Testing) - подвид тестирования производительности, проверяет тестируемый продукт с точки
зрения способности противостоять и успешно восстанавливаться после возможных сбоев,
возникших в связи с ошибками ПО, отказами оборудования или проблемами связи/сети. 

** Эталонное и базовое тестирование (Benchmark and Baseline Testing)
● Эталонный тест (benchmark test):
(1) стандарт, согласно которому может производиться измерение или сравнение.
(2) тест, который может использоваться для сравнения компонентов или систем друг с другом
или на соответствие стандарту, указанному в (1). (IEEE 610)
Базовая версия (baseline): Спецификация или программный продукт, который был формально
отрецензирован или согласован, впоследствии используется как базовая версия для дальнейшей
разработки, и который может быть изменен только в процессе формального контроля процесса
изменений. (IEEE 610)
● Эталонное тестирование (Benchmark Testing) - это набор стандартов, метрик или контрольных
точек (reference point), по которым оценивается (assessed or evaluated) качество работы
продукта или услуги, через нагрузочное тестирование модуля или всей комплексной
программной системы для определения ее производительности. Оно определяет повторяемый
набор экспериментальных результатов, которые помогают определить функциональные
возможности как для текущих, так и для будущих выпусков программного обеспечения.
● Тестирование базовой версии (Baseline Testing) - это подход к тестированию, в котором
за точку отсчета берется базовая линия - это показатель конкретного ориентира, который
служит основой для нового тестирования. В Baseline Testing тесты прогоняют, сохраняют
все результаты и сравнивают с базовым уровнем. Этот базовый уровень относится к последним
принятым результатам испытаний. Если в исходном коде есть новые изменения, то для
повторного выполнения тестов необходимо сформировать текущий базовый уровень. Если
последние результаты будут приняты, то текущая базовая линия станет базовой.

** Тестирование хранилища (Storage testing)
Тестирование хранилища (Storage testing, Storage Performance testing) - это вид
тестирования ПО, используемого для проверки того, как тестируемое ПО хранит данные в
соответствующих каталогах и достаточно ли в них места для предотвращения неожиданного
завершения работы из-за недостатка места на диске. ПО должно обрабатывать такие
исключения и отображать предупреждающее сообщение для пользователя.

Зачем оно нужно?
1. Медленное хранилище означает медленное время отклика, длительные запросы и более
низкую доступность (availability) приложений;
2. Медленное хранилище - это накладные расходы на обслуживание серверной инфраструктуры;
3. Помогает найти практические ограничения хранилища перед развертыванием;
4. Это помогает понять, как система отреагирует на замену или обновление оборудования;

** Одновременное / многопользовательское тестирование (Concurrency/Multi-user testing)
Concurrency testing - это подвид нагрузочного тестирования, при котором проверяется
поведение системы (веб-приложение, веб-страница или API) в момент, когда одновременно
происходят два или более событий, или выполняется одновременный вход нескольких
пользователей в систему с выполнением одного и того же действия. Во время теста
наблюдаются и записываются определенные метрики, а также измеряется время отклика системы
в периоды устойчивой большой нагрузки. 
Зачем оно нужно:
1. Определяет влияние одновременного доступа к одним и тем же записям базы данных, модулям
или коду приложения;
2. Определяет и измеряет уровень взаимоблокировки, блокировки и использования однопоточного
кода и ограничения доступа к общим ресурсам;

** Тестирование сервиса (Service Testing)
Качество обслуживания, предоставляемого веб-приложением, может быть определено включением
всех его атрибутов, таких как функциональность, производительность, надежность, удобство
использования, безопасность и так далее. Однако для наших целей здесь мы выделяем три
конкретные задачи обслуживания (?service objectives), которые подвергаются тщательной
проверке в рамках того, что мы называем «?тестированием услуг»:
Performance;
Reliability;
Manageability;
Во всех трех случаях нам необходимо моделировать пользовательскую нагрузку для
эффективного проведения тестов. Цели производительности, надежности и управляемости
существуют в контексте реальных клиентов, использующих сайт для бизнеса. Скорость отклика
(в данном случае время, необходимое одному системному узлу для ответа на запрос другого)
сайта напрямую зависит от ресурсов, доступных в технической архитектуре. Чем больше
клиентов используют эту услугу, тем меньше технических ресурсов доступно для обслуживания
запросов каждого пользователя, и время отклика сокращается.

** Тестирование безопасности (Security and Access Control testing)
Это тип тестирования ПО, который выявляет уязвимости, угрозы и риски. Целью тестов
безопасности является выявление всех возможных лазеек и слабых мест в ПО, которые могут
привести к потере информации, доходов, репутации компании, сотрудников или клиентов.
● Общая стратегия безопасности основывается на трех основных принципах:
1. Конфиденциальность - сокрытие определенных ресурсов или информации;
2. Целостность - ресурс может быть изменен только в соответствии с полномочиями пользователя;
3. Доступность - ресурсы должны быть доступны только авторизованному пользователю, внутреннему объекту или устройству;
Тестирование безопасности обычно выполняет отдельный специалист по безопасности. В ходе тестирования безопасности испытатель играет роль взломщика. Ему разрешено все:
1. попытки узнать пароль с помощью внешних средств;
2. атака системы с помощью специальных утилит, анализирующих защиты;
3. перегрузка системы (в надежде, что она откажется обслуживать других клиентов);
4. целенаправленное введение ошибок в надежде проникнуть в систему в ходе восстановления;
5. просмотр несекретных данных в надежде найти ключ для входа в систему;

** Оценка уязвимости/защищенности (Vulnerability Assessment)
● Уязвимость - это любые ошибки или недостатки в процедурах безопасности системы,
разработке, реализации или любом внутреннем контроле, которые могут привести к нарушению
политики безопасности системы.
● Оценка уязвимости - это процесс оценки рисков безопасности в программной системе с целью
уменьшения вероятности угрозы. Целью оценки уязвимости является снижение возможности
несанкционированного доступа для злоумышленников (хакеров).
Анализ проникновения зависит от двух механизмов, а именно от оценки уязвимости и
тестирования на проникновение (VAPT - Vulnerability Assessment and Penetration testing).
● Классификация уязвимостей:
1. Уязвимость оборудования - это недостатки, возникающие из-за проблем с оборудованием,
таких как чрезмерная влажность, пыль и незащищенное хранение оборудования;
2. Уязвимость программного обеспечения. Недостаток в методике разработки проекта,
несоответствующее тестирование и отсутствие своевременного аудита активов приводят
к уязвимости программного обеспечения;
3. Уязвимость сети: из-за использования открытых сетевых подключений, незащищенной сетевой
архитектуры и слабого канала связи возникают проблемы этого типа;
4. Физическая уязвимость: если система расположена в зоне, подверженной сильному дождю,
наводнению, нестабильному электроснабжению и т. д., тогда она подвержена физической
уязвимости;
5. Уязвимость организации: эта уязвимость возникает из-за использования несоответствующих
инструментов безопасности, правил аудита и ошибок в административных действиях;

** Фаззинг-тестирование (Fuzz testing)
FUZZ testing (fuzzing) - это тип тестирования безопасности, который обнаруживает ошибки
кодирования и лазейки в программном обеспечении, операционных системах или сетях.
Фаззинг включает в себя ввод огромного количества случайных данных, называемых fuzz,
в тестируемое программное обеспечение, чтобы заставить его дать сбой или прорвать его
защиту. Фаззинг часто выявляет уязвимости, которые могут быть использованы с помощью
SQL-инъекции, переполнения буфера, отказа в обслуживании (DOS) и XSS. Fuzz-тестирование
выполняется с помощью фаззера - программы, которая автоматически вводит полуслучайные
данные в программу и обнаруживает ошибки. Fuzz-тестирование обычно выполняется
автоматически.
Обычно fuzzing обнаруживает наиболее серьезные ошибки или дефекты безопасности.
Это очень экономически эффективный метод тестирования. Fuzzing - один из самых
распространенных методов хакеров, используемых для обнаружения уязвимости системы
(сюда относятся популярные SQL- или скриптовые инъекции).

** Тестирование совместимости/взаимодействия (Compatibility/Interoperability testing)
● Тестирование совместимости (compatibility testing): Тип тестирования, который измеряет
степень того, насколько удовлетворительно элемент тестирования может функционировать
параллельно с другими независимыми продуктами в общей среде (сосуществование) и, по мере
необходимости, обменивается информацией с другими системами или компонентами
(функциональная совместимость). (ГОСТ 56920)
● Взаимодействие (Interoperability) - это способность одной системы взаимодействовать
с другой системой. Это взаимодействие между двумя разными системами или двумя разными
приложениями вместе. Часто взаимодействие путают с интеграцией, совместимостью и
портируемостью.
Типы тестирования совместимости:
1.Тестирование совместимости браузера (Browser compatibility testing): очень популярно
при тестировании совместимости. Это необходимо для проверки совместимости программного
приложения с различными браузерами, такими как Chrome, Firefox, Internet Explorer,
Safari, Opera и т. д.;
2. Аппаратное обеспечение (Hardware): Это необходимо для проверки совместимости приложения
/ программного обеспечения с различными конфигурациями оборудования;
3. Сети (Networks): Это для проверки приложения в разных сетях, таких как 3G, WIFI и т. д.;
4. Мобильные устройства (Mobile Devices): Это необходимо для проверки совместимости
приложения с мобильными устройствами и их платформами, такими как android, iOS, windows и т. д.;
5. Операционная система (Operating System): Это необходимо для проверки совместимости
приложения с различными операционными системами, такими как Windows, Linux, Mac и т. д.;

** Конфигурационное тестирование (Configuration testing)
Конфигурационное тестирование (Configuration testing) - специальный вид тестирования,
направленный на проверку работы ПО при различных аппаратных и программных конфигурациях
системы (заявленных платформах, поддерживаемых драйверах, при различных конфигурациях
компьютеров и т. д.).
Configuration = performance + compatibility:
performance аспект: определить оптимальную конфигурацию оборудования, обеспечивающую
требуемые характеристики производительности и времени реакции тестируемой системы;
compatibility аспект: проверить объект тестирования на совместимость с объявленным в
спецификации оборудованием, операционными системами и программными продуктами третьих фирм;

в ISTQB вообще не говорится о таком виде тестирования как конфигурационное:
“configuration testing: See portability testing.”
Тестирование переносимости (Portability testing) - тип тестирования, проводимого для
оценки простоты переноса элемента тестирования из одних аппаратных средств или программной
среды в другие, включая уровень его изменений, необходимых для выполнения в средах
различных типов. (ГОСТ 56920). Результаты тестирования, полученные в результате
тестирования переносимости, помогают выяснить, насколько легко программный компонент
из одной среды можно использовать в другой среде. Термин «среда» относится к переходу
от одной операционной системы к другой, от одного браузера к другому или от одной версии
базы данных к другой версии базы данных. Измерение переносимости - это усилия,
необходимые для перемещения программного компонента из одной среды в другую.
Portability vs. Compatibility:
1. Переносимость касается перемещения компонента из одной среды в другую. Пример: игра,
работающая в Windows XP, считается переносимой, если та же игра может быть запущена
в Windows 7 без каких-либо изменений в ее поведении;
2. Проще говоря, тестирование переносимости касается программного компонента в разных
средах, в то время как тестирование совместимости касается тестирования разных приложений
в одной среде;

** Инсталляционное тестирование (Installation Testing)
Тестирование устанавливаемости (installability testing): Тип тестирования переносимости
для оценки того, могут ли должным образом элемент тестирования или совокупность элементов
тестирования быть установлены во всех указанных средах. (ГОСТ 56920)
Тестирование инсталляции (установки) направлено на проверку успешной установки, настройки,
обновления и удаления ПО, как десктопного, так и мобильного.

** Тестирование на соответствие (Conformance/Compliance testing)
Соответствие (compliance): Способность программного продукта соответствовать стандартам, соглашениям или правилам законодательства и другим подобным предписаниям. (ISTQB)
Compliance - официальное соответствие ПО различным стандартам, законам, сертификация и т.п.
Conformance - неофициальные, внутренние стандарты организации, добровольное обязательство
делать что-либо признанным образом, либо стремление к Compliance, но которое не
закончено / не подтверждено формально.

** Тестирование удобства пользования (Usability testing)
Тестирование практичности (usability testing): Тестирование с целью определения степени
понятности, легкости в изучении и использовании, привлекательности программного продукта
для пользователя при условии использования в заданных условиях эксплуатации (ISO 9126)
Тестирование удобства пользования - это нефункциональный вид тестирования программного
обеспечения, являющийся подмножеством тестирования пользовательского опыта - UX, “Ю-Экс”,
user experience. В целом оно подразделяется на понятность, обучаемость, работоспособность,
привлекательность и соответствие (understandability, learnability, operability,
attractiveness, and compliance). Юзабилити-тестирование предназначено для определения того,
насколько программный продукт понятен, легок в освоении, прост в эксплуатации и
привлекателен для пользователей при определенных условиях и требованиях. Этот тип
тестирования обычно выполняется реальными пользователями.

Категории юзабилити-тестирования:
● Исследовательская: обычно мы рассматриваем эту категорию на ранних этапах процесса
тестирования программного обеспечения. Чем раньше выполняется тестирование юзабилити
в процессе тестирования, тем меньше риски в продукте. На этом этапе обычно
рассматривается дизайн продукта и концепции, относящиеся к продукту или услуге;
● Оценочная: эта категория описывает оценку выполнения Е2Е теста, а также анализирует
эффективность продукта и удовлетворенность пользователей;
● Сравнительная: в этой категории два или более схожих продукта сравниваются по разным
атрибутам, таким как дизайн продукта, преимущества и недостатки, что помогает выбрать
продукт, который обеспечивает лучший пользовательский опыт;

Тестирование удобства пользования дает оценку уровня удобства использования приложения
по следующим пунктам:
1. производительность, эффективность (efficiency) - сколько времени и шагов понадобится
пользователю для завершения основных задач приложения, например, размещение новости,
регистрации, покупка и т. д.? (меньше - лучше)
2. правильность (accuracy) - сколько ошибок сделал пользователь во время работы с
приложением? (меньше - лучше)
3. активизация в памяти (recall) - как много пользователь помнит о работе приложения
после приостановки работы с ним на длительный период времени? (повторное выполнение
операций после перерыва должно проходить быстрее чем у нового пользователя)
4. эмоциональная реакция (emotional response) - как пользователь себя чувствует после
завершения задачи - растерян, испытал стресс? Порекомендует ли пользователь систему
своим друзьям? (положительная реакция - лучше)

** Тестирование доступности (Accessibility testing)
● Тестирование доступности (accessibility testing): Тестирование, которое определяет степень
легкости, с которой пользователи с ограниченными способностями могут использовать
систему или ее компоненты (ISTQB).
● Тестирование доступности (accessibility testing): Тип тестирования удобства использования,
предназначенный для оценки степени возможности управления элементом тестирования
пользователями с самыми разными характеристиками и способностями. (ГОСТ 56920)
● Тестирование доступности (accessibility testing) - это подмножество юзабилити-тестирования.
Его цель - убедиться в том, что наш продукт удобен в использовании людям с различными
видами ограничений, инвалидности или особенностями восприятия.

** Тестирование локализации, глобализации и интернационализации (Localization/
globalization/internationalization)
Глобализированное ПО - это ПО, функционирующее одинаково качественно независимо от
географической, культурной и национальной среды. Тестирование глобализации концентрируется
на выявлении потенциальных проблем в дизайне продукта, которые могут испортить
глобализацию. Например, разработчик должен заложить в CSS основу для вертикального текста,
если в будущем планируется локализовать продукт на язык с вертикальным письмом, обработку
почтовых индексов для разных стран (где-то цифры, где-то цифры с буквами и т.п.).
Оно гарантирует, что код может обрабатывать желаемую международную поддержку без нарушения
какой-либо функциональности. А также, что не будет никакой потери данных и проблем
с отображением.
Globalization = Internationalization + Localization.

Интернационализация ПО (Internationalization (I18N)) - это особый процесс, при котором
веб-софт создается таким образом, чтобы оно было равноудаленным от какой-либо культуры
и (или) специфики определенного географического региона. Например, одна из задач по
интернационализации ПО - корректное редактирование логики всех подключенных параметров
форматирования (формат даты, времени, цифровое и валютное форматирование). Также,
тестировщики во время проверки на соответствие ПО требованиям I18N тестируют работу
продукта на одинаковую работу в разных регионах и культурах мира. Основной задачей
тестирования интернациональности является проверка того, может ли программный код
работать со всей международной поддержкой без нарушения функциональности, что может
привести к потере данных или проблемам целостности информации. В основном, фокус
тестирования интернационализации направлен на:
1. Тестирование языковой совместимости: это включает проверку того, может ли продукт
правильно работать в определенной языковой среде;
2. Тестирование функциональности: это включает выполнение регрессионных тестов
функциональности в различных языковых средах и ввод строк на родном языке.
Это включает в себя проверку того, правильно ли отображается и принимается на ввод
валюта, дата, время, индекс и т.п.;
3. Проверка пользовательского интерфейса: пытается выявить любые визуальные проблемы,
такие как проблемы с графикой, наложение текста, усечение текста и т. д.;
4. Тестирование совместимости: это включает тестирование программного обеспечения на
целевых кросс-платформах, операционных системах, версиях приложений и т. д.;
5. Тестирование юзабилити: проверяет простоту использования приложения;
6. Тестирование установки: это включает попытку установить приложение на разных родных
языках и проверить, правильно ли отображаются все сообщения об установке в языковых
настройках;

Локализация ПО (Localization (L10N)) - деятельность по модификации ПО в соответствии
с определенными региональными настройками (языком, географической территорией,
культурными особенностями). В данный вид проверки входит необходимость выполнения работ
по переводу всего контента программного обеспечения для конечного пользователя. Во время
перевода должны учитываться иконки, информационная графика, справочные материалы,
техническая документация и иные культурные особенности регионов (например, онлайн-сервис
по заказу бургеров не будет показывать корову на главной странице в Индии или свинью
в мусульманских странах). На что обратить внимание:
Длина переведенных слов;
Параметры шрифта пользовательского интерфейса;
Ввод текста в разных локализациях;
RTL-языки (справа-налево) или вертикальные;
Перевод сокращений или аббревиатур;
Мета-теги (проблемы с SEO или отображением имени вкладки (title, description, keywords));
Соответствие мер исчисления, валюты, postal code и т.п.;
Примеры проверок:
Языковой словарь
Пользовательский интерфейс
Обозначение даты и времени
Корректность даты / времени
Формат валюты и обработка курсов конвертации
Формат номера телефона, адреса и почтового индекса

** Исследовательское тестирование (Exploratory testing)
● Исследовательское тестирование (exploratory testing): Неформальный метод проектирования
тестов, при котором тестировщик активно контролирует проектирование тестов в то время,
как эти тесты выполняются, и использует полученную во время тестирования информацию для
проектирования новых и улучшенных тестов. (Bach)
● Исследовательское тестирование (exploratory testing): Тестирование, основанное на опыте,
при котором тестер спонтанно разрабатывает и выполняет тестирования на основе
существующих соответствующих знаний тестера, предшествующих исследований элемента
тестирования (включая и результаты предыдущих тестирований) и эвристических "эмпирических
правил" для общего поведения программного обеспечения и типов отказа. Примечание -
Исследовательское тестирование направлено на выявление скрытых свойств (включая и скрытое
поведение), которые сами по себе, с одной стороны, вполне возможно, безобидны, но,
с другой стороны, могут повлиять на другие свойства тестируемого программного обеспечения
и тем увеличить риск того, что программное обеспечение перестанет работать. (ГОСТ 56920)

** Свободное / Интуитивное тестирование (Adhoc, Ad-hoc Testing)
● Свободное тестирование (ad hoc testing): Тестирование, выполняемое неформально; без
формальной подготовки тестов, формальных методов проектирования тестов, определения
ожидаемых результатов и руководства по выполнению тестирования. (ISTQB)
● Свободное тестирование (ad-hoc testing) - это вид тестирования, который выполняется
без подготовки к тестированию продукта, без определения ожидаемых результатов,
проектирования тестовых сценариев. Это неформальное, импровизационное тестирование.
Оно не требует никакой документации, планирования, процессов, которых следует
придерживаться при выполнении тестирования. Такой способ тестирования в большинстве
случаев дает большее количество заведенных отчетов об ошибке. Это обусловлено тем,
что тестировщик на первых шагах приступает к тестированию основной функциональной части
продукта и выполняет как позитивные, так и негативные варианты возможных сценариев.

Виды свободного тестирования (ad-hoc testing):
1. Buddy testing - процесс, когда 2 человека, как правило разработчик и тестировщик,
работают параллельно и находят дефекты в одном и том же модуле тестируемого продукта.
Сразу после того, как разработчик завершает модульное тестирование, тестировщик
и разработчик вместе работают над модулем. Этот вид тестирования позволяет обеим
сторонам рассматривать эту функцию в более широком масштабе. Разработчик получит
представление обо всех различных тестах, выполняемых тестером, а тестировщик получит
представление о том, какова внутренняя конструкция, которая поможет ему избежать
разработки недействительных сценариев;
2. Pair testing - в этом тестировании два тестировщика (лучше с разным опытом) работают
вместе над одним модулем. Идея, лежащая в основе этой формы тестирования состоит в том,
чтобы заставить двух тестировщиков провести мозговой штурм идей и методов, чтобы выявить
ряд дефектов. Оба могут разделять работу по тестированию и делать необходимую документацию
по всем сделанным наблюдениям;
3. Monkey testing - произвольное тестирование продукта с целью как можно быстрее,
используя различные вариации входных данных, нарушить работу программы или вызвать
ее остановку (простыми словами - сломать);

Основные преимущества ad-hoc testing:
1. нет необходимости тратить время на подготовку документации;
2. самые важные дефекты зачастую обнаруживаются на ранних этапах;
3. часто применяется, когда берут нового сотрудника. С помощью этого метода, человек
усваивает за 3 дня то, что, разбираясь тестовыми случаями, разбирал бы неделю - это
называется форсированное обучение новых сотрудников;
4. возможность найти трудновоспроизводимые и трудноуловимые дефекты, которые невозможно
было бы найти, используя стандартные сценарии проверок;

** Тестирование поддержки (Maintenance testing)
● Сопровождение (maintenance): Модификация программного продукта после его поставки
с целью исправления дефектов, улучшения производительности или других характеристик
или для адаптации продукта к изменившемуся окружению. (IEEE 1219)
● Сопровождаемость (maintainability): Легкость изменения программного продукта для
исправления дефектов, для соответствия новым требованиям, с целью облегчения последующего
сопровождения или для адаптации к изменившемуся окружению. (ISO 9126)
● Тестирование сопровождаемости (maintainability testing): Тип тестирования, проводимого
для оценки степени эффективности и продуктивности возможных изменений элемента
тестирования. (ГОСТ 56920)
● Maintenance testing (тестирование поддержки/обслуживания/эксплуатации/сопровождения)
- это модификация программного продукта после его выпуска с целью исправления дефектов,
улучшения производительности или других характеристик или для адаптации продукта к
изменившемуся окружению. (IEEE 1219). 

Reliability, maintainability в ISO 9126 определяется как «легкость, с которой программный
продукт может быть изменен для исправления дефектов, модифицирован для соответствия
новым требованиям, модифицирован для облегчения будущего обслуживания или адаптирован
к изменившейся среде».

Виды Maintenance testing:
1. Подтверждающее тестирование (Confirmation Maintenance Testing): тестирование измененной
функциональности. Вы должны тщательно протестировать все модификации (небольшие или
большие), внесенные в программное обеспечение, и убедиться, что нет проблем
с функциональностью и простоев. Тестовая среда должна быть копией реальной среды вместе
с тестовыми данными;
2. Регрессионное тестирование (Regression Maintenance Testing): тестирование существующей
функциональности на предмет регрессии. Это делается после фазы подтверждающего
тестирования. Вы должны протестировать всю систему, чтобы убедиться, что измененная
функциональность (работы по обслуживанию) не должна влиять на функциональность
существующего программного обеспечения;

** Регрессионные виды тестирования (Regression testing)
● Регрессионное тестирование (regression testing): Тестирование уже протестированной
программы, проводящееся после модификации для уверенности в том, что процесс модификации
не внес или не активизировал ошибки в областях, не подвергавшихся изменениям.
Проводится после изменений в коде программного продукта или его окружении. (ISTQB)
● Регрессионное тестирование (Regression Testing) - собирательное название для всех видов
тестирования программного обеспечения связанных с изменениями, направленных на
обнаружение ошибок в уже протестированных участках исходного кода, на проверку того,
что новая функциональность не зааффектила (affect) старую. Такие ошибки - когда после
внесения изменений в программу перестаёт работать то, что должно было продолжать работать,
- называют регрессионными ошибками (regression bugs). Регрессионные тесты должны быть
частью релизного цикла (Release Cycle) и учитываться при тестовой оценке (test estimation).

Регрессионное тестирование обычно проводится перед релизом новой версии приложения.
Это происходит следующим образом: в течение какого-то времени делаются какие-то фичи
и другие задачи, они тестируются по отдельности и сливаются в общую ветку
(мастер/девелоп - чаще всего эта ветка называется в зависимости от процессов в проекте).
Дальше, когда время подходит к релизу от ветки девелопа создается ветка релиза, из которой
собирается релиз-кандидат и на нем уже проводят регресс.

Смоук тестирование (Smoke testing)
● Тест "на дым" (smoke test): Выборка из общего числа запланированных тестовых сценариев,
покрывающая основную функциональность компонента или системы. Проводится с целью
удостовериться, что базовые функции программы в целом работают корректно, без углубления в
детали. Ежедневная сборка и тест "на дым" являются передовыми практическими методами.
● Тест верификации сборки (build verification test): Набор автоматических тестов,
валидирующих целостность каждой новой сборки и верифицирующих ее ключевую/базовую
функциональность, стабильность и тестируемость. Данный вид тестирования используется там,
где присутствует высокая частота сборок (например, проекты с использованием гибких
методологий разработки) и выполняется для каждой новой сборки перед передачей ее в
тестирования.
● Smoke testing - это подмножество регрессионного тестирования, короткий цикл тестов,
выполняемый для каждой новой сборки для подтверждения того, что ПО после внесенных
изменений стартует и выполняет основные функции без критических и блокирующих дефектов.
В случае отсутствия блокеров Smoke testing объявляется пройденным, и команда QA может
начинать дальнейшее тестирование полного цикла, в противном случае, сборка объявляется
дефектной, что делает дальнейшее тестирование пустой тратой времени и ресурсов.
● Если мы говорим про сайт интернет-магазина, то сценарий может быть следующим:
Сайт открывается
Можно выбрать случайный товар и добавить его в корзину
Можно оформить и оплатить заказ

● Санити тестирование (Sanity testing)
Sanity testing также является подмножеством регрессионного тестирования и выполняется
до или вместо полной регрессии, но после smoke. Эти два подвида похожи, но в целом
Sanity используется на более стабильных билдах для определения работоспособности
определенной части приложения после внесения изменений.

● Подтверждающее, повторное тестирование (confirmation testing, re-testing)
Подтверждающее тестирование (confirmation testing): Тестирование, при котором
выполняются тестовые сценарии, которые были не пройдены при последнем запуске,
с целью подтвердить успешность исправлений. (ISTQB)
Повторное тестирование - это тип тестирования, выполняемый в новой сборке по проваленному
на старой сборке тест-кейсу с тем же окружением и данными, для проверки того, что этот
дефект теперь устранен. Ре-тест выполняется перед sanity-тестированием, приоритет
ре-теста выше регрессионных проверок, поэтому оно должно выполняться перед ними.

● Разница между повторным и регрессионным тестированием:
1. Регрессионное тестирование проводится для подтверждения того, что недавнее изменение
программы или кода не оказало неблагоприятного воздействия на существующие функции.
Повторное тестирование проводится для подтверждения того, что тест-кейсы, которые не
прошли, проходят после устранения дефектов;
2. Цель регрессионного тестирования подтвердить, что новые изменения кода не должны иметь
побочных эффектов для существующих функций. Повторное тестирование проводится на основе
исправлений дефектов.;
3. Проверка дефектов не является частью регрессионного тестирования. Проверка дефекта
является частью повторного тестирования;
4. Регрессионное тестирование проводится для пройденных Test case. Повторное тестирование
проводится только для неудачных тестов;
5. Регрессионное тестирование проверяет наличие неожиданных побочных эффектов. Повторное
тестирование гарантирует, что первоначальная ошибка была исправлена;

** Тестирование клиентской части и серверной (Frontend testing Vs. Backend testing)
● Frontend testing - это тип тестирования, который проверяет уровень представления
(Presentation layer) в 3-уровневой архитектуре (3 Tier Architecture). С точки зрения
непрофессионала, вы проверяете GUI - все, что видно на экране, на стороне клиента.
Для веб-приложения интерфейсное тестирование будет включать проверку функциональных
возможностей, таких как формы, графики, меню, отчеты и т. д., а также связанный
Javascript. Frontend testing - это термин, охватывающий различные стратегии тестирования,
включая оценку производительности фронтенда, которая является хорошей практикой перед
тестированием приложения с высокими пользовательскими нагрузками.

● Backend testing - это тип тестирования, который проверяет уровень приложений и базы данных
3-уровневой архитектуры. В сложном программном приложении, таком как ERP, внутреннее
тестирование повлечет за собой проверку бизнес-логики на уровне приложений. Для более
простых приложений бэкэнд-тестирование проверяет серверную часть или базу данных.
Это означает, что данные, введенные в интерфейс, будут проверены в базе данных.
Базы данных проверяются на наличие свойств ACID, операций CRUD, их схемы, соответствия
бизнес-правилам. Базы данных также проверяются на безопасность и производительность.

** Тестирование графического интерфейса (GUI - Graphical User Interface testing)
Интерфейс - это то, с помощью чего происходит “общение” между ПО и окружением.
Существует два типа интерфейсов:
1. Интерфейс командной строки (CLI - Command Line Interface), где вы вводите текст в
терминал, и компьютер отвечает на эту команду;
2. Графический интерфейс пользователя (GUI - Graphical User Interface) , где вы
взаимодействуете с компьютером, используя графическое представление, а не текст;

Тестирование графического интерфейса пользователя (GUI) проводят с целью проверить
функциональность и корректность отображения интерфейса пользователя (меню, панели
инструментов, цвета, шрифты, размеры, значки, контент, кнопки и т. д., как они реагируют
на ввод пользователя).
Примеры проверок:
1. Тип и размер шрифта: шрифт одинаковый на всех экранах или хотя бы одного семейства,
одинаковый размер шрифта заголовков, основного текста и т. д.;
2. Обязательные поля: всегда лучше указать, что поле является обязательным, добавив к
нему звездочку и предоставив пользователю своего рода предупреждение, если данные не
указаны;
3. Ошибки типов данных: всегда проверяйте, что указан правильный тип данных (даты,
возраст, вес и т. д.);

** Тестирование API (API - Application Programming Interface)
Тестирование API - это тип тестирования (хотя правильнее наверное сказать не тип или вид,
а еще один вариант взаимодействия с системой) который включает в себя тестирование API
напрямую, а также в рамках интеграционного тестирования, чтобы проверить, соответствует
ли API ожиданиям с точки зрения функциональности, надежности, производительности
и безопасности приложения. В тестировании API наш основной упор будет сделан на уровне
бизнес-логики архитектуры программного обеспечения.

Типы тестирования API:
● Unit testing: Для проверки функциональности отдельной операции;
● Functional testing: Чтобы проверить функциональность более широких сценариев с помощью
блока результатов unit-тестирования, протестированных вместе;
● Load testing: Чтобы проверить функциональность и производительность под нагрузкой;
● Runtime/Error Detection: Мониторинг приложения для выявления проблем, таких как
исключения и утечки ресурсов;
● Security testing: Чтобы гарантировать, что реализация API защищена от внешних угроз;
● UI testing: Это выполняется как часть end-to-end integration тестов, чтобы убедиться,
что каждый аспект пользовательского интерфейса функционирует должным образом;
● Interoperability and WS Compliance testing: Совместимость и WS Compliance testing
- это тип тестирования, который применяется к SOAP API. Функциональная совместимость
между API-интерфейсами SOAP проверяется путем обеспечения соответствия профилям
функциональной совместимости веб-служб. Соответствие WS- * проверено, чтобы гарантировать,
что стандарты, такие как WS-Addressing, WS-Discovery, WS-Federation, WS-Policy,
WS-Security и WS-Trust, должным образом реализованы и используются;
● Penetration testing: Чтобы найти уязвимости при атаках злоумышленников;
● Fuzz testing: Для проверки API путем принудительного ввода в систему некорректных данных
для попытки принудительного сбоя;
● Usability testing: проверяет, является ли API функциональным и удобным для пользователя
и хорошо ли интегрируется с другой платформой;
● Documentation testing: команда тестирования должна убедиться, что документация
соответствует требованиям и предоставляет достаточно информации для взаимодействия с API.
Документация должна быть частью окончательного результата;

Примеры проблем, которые обнаруживает тестирование API:
● Некорректная обработка условий ошибки;
● Неиспользуемые флаги;
● Отсутствующие или повторяющиеся функции;
● Вопросы надежности;
● Сложность подключения и получения ответа от API;
● Проблемы с безопасностью;
● Проблемы с многопоточностью;
● Проблемы с производительностью. Время отклика API очень велико;
● Неправильные ошибки / предупреждение вызывающему абоненту;
● Неправильная обработка допустимых значений аргументов;
● Данные ответа неправильно структурированы (JSON или XML);

Контрактное тестирование API
В общем случае контрактное тестирование или Consumer Driven Contract (CDC) является
связующим звеном между модульным и интеграционным тестированием.
Каждый интерфейс имеет поставщика (supplier) и потребителя (consumer). Само собой,
сервисы поставщика и потребителя распределены между разными командами, мы оказываемся
в ситуации, когда четко прописанный интерфейс между ними (или контракт) просто необходим.
Обычно многие подходят к этой проблеме следующим образом:
● Пишут подробное описание спецификации интерфейса - контракт;
● Реализуют сервис поставщика согласно спецификации;
● Передают спецификацию интерфейса потребителю;
● Ждут реализации от другой стороны;
● Запускают ручные системные тесты, чтобы всё проверить;
● Держат кулачки, что обе стороны будут вечно соблюдать описанный интерфейс;

Отличие API от SDK:
● SDK (software development kit) - это набор функционала (библиотек) и утилит для разработки.
Собственно SDK и предоставляет реализацию некоторого API, это оболочка API's, которая
упрощает работу для разработчиков.
● API: набор готовых классов, процедур, функций, структур и констант, предоставляемых
приложением для использования во внешних программных продуктах. Это интерфейс, похоже
на спецификацию телефонной системы или электропроводки в вашем доме. Это список того,
что можно вызывать и какого ждать результата;
● SDK: набор реальных инструментов внедрения. Это как чемодан деталей и инструментов,
который позволяет вам подключиться к телефонной системе или электрической проводке.
Это библиотеки, в которых реализованы вызываемые функции + файлы необходимые для
подключения этих библиотек;

** A/B тестирование (A/B Testing)
Для проведения A/B Testing (split testing,bucket testing) мы создаем и анализируем два
варианта чего-либо (экрана приложения, страницы сайта, элементов GUI, механики работы,
воронки продаж и т.п.), чтобы найти, какой вариант работает лучше с точки зрения
пользовательского опыта, потенциальных клиентов, конверсий или любой другой цели.
Предположим, у нас есть интернет магазин и каталог отображается определенным образом.
В какой-то момент (новые маркетинговые исследования/пожелания клиента и т. д.) решено
изменить дизайн выдачи товаров в каталоге. Независимо от того, сколько проведено анализа,
выпуск нового пользовательского интерфейса будет большим изменением и может иметь
неприятные последствия.
В этом случае мы можем использовать A / B-тестирование. Мы создадим интерфейс нового
варианта и перенаправим часть трафика пользователей на него. Например - мы можем
распределить пользователей в соотношении 50:50 или 80:20 между двумя вариантами - A и B.
После этого в течение определенного периода времени мы будем наблюдать за статистикой
и коэффициентами конверсии обоих вариантов. Таким образом, тестирование A/B помогает
принять решение о выборе лучшего варианта.
Исходный вариант (А) называется контроль (control), а альтернативный (B) - вариация (variation).
При проведении A / B-тестирования мы получаем данные / статистику от чемпионов,
претендентов и вариаций (champions, challengers, and variations). Эти версии дают
представление о коэффициентах конверсии ваших посетителей.

Что тестируется с помощью A/B Testing:
1. Лендинги (Landing pages): это веб-страница, на которую пользователь попадает после
нажатия на объявление, ссылку в вашей почтовой кампании или в любом другом цифровом месте.
2. Заголовки (Headlines): могут иметь очень важное значение, поскольку это первое,
на что смотрит любой пользователь, заходя на ваш сайт. Если ваш заголовок не привлекает
их внимания, не ожидайте, что они задержатся на вашем сайте. Вы должны быть осторожны при
создании copy, шрифта, размера, цвета и сообщения;
3. Навигация (Navigation): посетитель должен беспрепятственно перемещаться по вашему
сайту. Их не должны перегружать или сбивать с толку разные элементы вашего веб-сайта.
Разместите панель навигации в верхнем левом углу и логотип вашего сайта в верхнем правом
углу, нажав на нее, вы вернетесь на главную страницу.
4. Формы (Forms): это способ получить информацию о вашем потенциальном клиенте.
Формы - лучший способ связаться с вашим потенциальным клиентом. Убедитесь, что они
подходящего размера.

** Деструктивное и недеструктивное тестирование (DT - Destructive testing and
NDT - Non Destructive testing)
● Негативное тестирование (negative testing): Тестирование, нацеленное на демонстрацию того,
что система или компонент не работают. Негативное тестирование относится в большей
степени к позиции тестировщика, нежели к определенному подходу к тестированию или метод
проектирования тестов, например - тестирование с некорректными входными значениями или
тестирование обработки исключений. (ISTQB)
● Destructive testing (негативное, Rainy day, Apocalypses day) - тип тестирования ПО для
поиска точек отказа в ПО, который проверяет систему на обработку исключительных ситуаций
(срабатывание валидаторов на некорректные данные), а также проверяет, что вызываемая
приложением функция не выполняется при срабатывании валидатора. Неожиданные условия
могут быть чем угодно, от неправильного типа данных до хакерской атаки.
Целью Destructive testing является предотвращение сбоя приложений из-за некорректных
входных данных.

Для деструктивного тестирования существует множество способов его проведения:
1. Метод анализа точек отказа: это пошаговое прохождение системы, проводящее оценку того,
что может пойти не так в разных точках. Для этой стратегии может быть использована помощь
BA (Business Analyst);
2. Бизнес-анализ тест-кейсов: конечные пользователи или эксперты могут подумать о многих
допустимых сценариях, которые иногда тестировщики могут их не учитывать или упустить,
так как все их внимание будет сосредоточено на тестировании требований;

● Non Destructive testing (позитивное, Happy path, Sunny Day) - это тип тестирования
программного обеспечения, который включает в себя правильное взаимодействие с ПО.
Оно дает ожидаемые результаты и доказывает, что программное обеспечение ведет себя так,
как ожидалось. Пример: - Ввод правильных данных в модуль входа в систему и проверка,
принимает ли он учетные данные и переходит на следующую страницу.

** Выборочное/хаотическое тестирование (Random/monkey testing)
В ISTQB и некоторых других источниках эти понятия разделяются:
● Выборочное тестирование (random testing): Разработка тестов методом черного ящика,
при котором тестовые сценарии выбираются для соответствия функциональному разрезу,
обычно с помощью алгоритма псевдослучайного выбора. Этот метод может использоваться для
тестирования таких нефункциональных атрибутов, как надежность и производительность.
● Хаотическое тестирование (monkey testing): Тестирование случайным выбором из большого
диапазона входов, случайным нажатием кнопок, без соотнесения с тем, как в реальности
будет использоваться система.

** Тестирование документации (Documentation testing)
Плохая документация может повлиять на качество продукта. Тестирование артефактов,
разработанных до, во время и после тестирования продукта, называется тестированием
документации. Это нефункциональный тип тестирования программного обеспечения. Мы знаем,
что дефекты, обнаруженные на этапе тестирования, более дорогостоящие, чем если бы они
были обнаружены на этапе требований. Стоимость исправления ошибки увеличивается тем
больше, чем позже вы найдете ее. Таким образом, тестирование документации может
начаться с самого начала процесса разработки программного обеспечения, чтобы сэкономить
большую сумму денег.
Некоторые часто проверяемые артефакты:
Requirement documents
Test Plan
Test case
Traceability Matrix (RTM)

Техники тестирования требований:
● Взаимный просмотр (peer review). Взаимный просмотр («рецензирование») является одной
из наиболее активно используемых техник тестирования требований и может быть представлен
в одной из трех следующих форм (по мере нарастания его сложности и цены):
 1. Беглый просмотр (walkthrough) может выражаться как в показе автором своей работы
коллегам с целью создания общего понимания и получения обратной связи, так и в простом
обмене результатами работы между двумя и более авторами с тем, чтобы коллега высказал
свои вопросы и замечания. Это самый быстрый, дешевый и часто используемый вид просмотра.
Для запоминания: аналог беглого просмотра - это ситуация, когда вы в школе с
одноклассниками проверяли перед сдачей сочинения друг друга, чтобы найти описки и ошибки.
 2. Технический просмотр (technical review) выполняется группой специалистов. В идеальной
ситуации каждый специалист должен представлять свою область знаний. Тестируемый продукт
не может считаться достаточно качественным, пока хотя бы у одного просматривающего
остаются замечания. Для запоминания: аналог технического просмотра - это ситуация,
когда некий договор визирует юридический отдел, бухгалтерия и т.д.
 3. Формальная инспекция (inspection) представляет собой структурированный,
систематизированный и документируемый подход к анализу документации. Для его выполнения
привлекается большое количество специалистов, само выполнение занимает достаточно много
времени, и потому этот вариант просмотра используется достаточно редко (как правило,
при получении на сопровождение и доработку проекта, созданием которого ранее занималась
другая компания). 
● Вопросы. Следующей очевидной техникой тестирования и повышения качества требований
является (повторное) использование техник выявления требований, а также (как отдельный
вид деятельности) - задавание вопросов. Если хоть что-то в требованиях вызывает у вас
непонимание или подозрение - задавайте вопросы.
● Тест-кейсы и чек-листы. Мы помним, что хорошее требование является проверяемым,
а значит, должны существовать объективные способы определения того, верно ли реализовано
требование. Продумывание чек-листов или даже полноценных тест-кейсов в процессе анализа
требований позволяет нам определить, насколько требование проверяемо. Если вы можете
быстро придумать несколько пунктов чек-листа, это ещё не признак того, что с требованием
всё хорошо (например, оно может противоречить каким-то другим требованиям). Но если
никаких идей по тестированию требования в голову не приходит - это тревожный знак.
● Исследование поведения системы. Эта техника логически вытекает из предыдущей
(продумывания тест-кейсов и чек-листов), но отличается тем, что здесь тестированию
подвергается, как правило, не одно требование, а целый набор. Тестировщик мысленно
моделирует процесс работы пользователя с системой, созданной по тестируемым требованиям,
и ищет неоднозначные или вовсе неописанные варианты поведения системы.
● Рисунки (графическое представление). Чтобы увидеть общую картину требований целиком,
очень удобно использовать рисунки, схемы, диаграммы, интеллект-карты и т.д. Графическое
представление удобно одновременно своей наглядностью и краткостью (например, UML-схема
базы данных, занимающая один экран, может быть описана несколькими десятками страниц
текста).
● Прототипирование. Можно сказать, что прототипирование часто является следствием
создания графического представления и анализа поведения системы.

** Кроссбраузерное тестирование (Cross-browser testing)
● Кроссбраузерное тестирование - вид тестирования, направленный на поддержку и правильное
полное отображение программного продукта в разных браузерах, мобильных устройствах,
планшетах, экранах различного размера. Это нормально, если сайт выглядит немного
по-разному в разных браузерах, главное он должен обеспечивать полную функциональность
и доступность (accessibility). Приложения и сайты в разных браузерах могут вести себя
по-разному. Это связано с тем, что любой из браузеров имеет собственные движки,
надстройки, плагины, а также различия в десктопной и мобильной версиях.
● Вы должны попытаться протестировать его на реальных физических устройствах, где это
возможно. Если у вас нет средств для тестирования всех этих различных комбинаций
браузеров, операционных систем и устройств на физическом оборудовании, вы также можете
использовать эмуляторы (эмулировать устройство с помощью программного обеспечения на
вашем настольном компьютере) и виртуальные машины (программное обеспечение, которое
позволяет вам эмулировать несколько комбинаций операционной системы/программного
обеспечения на вашем настольном компьютере). 

● Cross-browser Testing Checklist
Функциональное тестирование;
Специальные возможности (accessibility);
Проверка CSS;
Проверка HTML или XHTML;
Проверка страницы с включенным JavaScript и без него;
Функциональность Ajax и JQuery;
Проверка размера шрифта;
Макет страницы в разных разрешениях;
Все изображения и выравнивание;
Разделы верхнего и нижнего колонтитула;
Выравнивание содержимого страницы по центру, по левому или правому краю;
Стили страницы;
Форматы даты;
Специальные символы с кодировкой HTML;
Функция увеличения и уменьшения масштаба страницы.

** Тестирование, основанное на рисках (Risk-Based Testing)
Тестирование, основанное на рисках (risk-based testing): Подход к тестированию с целью
минимизирования уровня рисков продукта и информирования заинтересованных лиц о текущем
состоянии рисков с начальных стадий проекта. Подразумевает под собой управление
процессом тестирования, исходя из идентифицированных рисков продукта и использования
уровней риска. (ISTQB)
Тестирование на основе рисков помогает обнаруживать наиболее важные и критические
ошибки на ранней стадии. Это тип тестирования, основанный на вероятности риска.
Он включает в себя оценку риска на основе сложности, критичности бизнеса, частоты
использования, видимых областей, областей, подверженных дефектам, и т. д. Он включает
определение приоритетов тестирования модулей и функций тестируемого приложения на
основе влияния и вероятности отказов. Если вовремя не выявить какой-либо риск, это может
помешать завершению проекта. Самым первым шагом является определение рисков, а затем их
оценка, т.е. определение приоритетов, а затем обработка рисков. После того, как риски
идентифицированы, необходимо оценить риск, чтобы определить риски с точки зрения их
воздействия, то есть того, какой ущерб он может нанести.

** Тестирование качества данных (Data Quality Testing)
Качество данных (data quality): Атрибут данных, показывающий их корректность согласно
некоторым предопределенным критериям: бизнес-ожиданиях, требованиям по полноте данных
или их непротиворечивости. (ISTQB)

Аспекты качественных данных (dimensions):
● Точность (Accuracy): насколько хорошо информация отражает реальность?
● Полнота (Completeness). Соответствует ли вашим ожиданиям от того, что является
всеобъемлющим?
● Согласованность (Consistency): соответствует ли информация, хранящаяся в одном месте,
релевантным данным, хранящимся в другом месте?
● Своевременность (Timeliness): доступна ли ваша информация тогда, когда она вам нужна?
● Срок действия, соответствие (Validity aka Conformity): имеет ли информация определенный
формат, тип или размер? Соответствует ли она бизнес-правилам / передовой практике?
● Целостность (Integrity): можно ли правильно объединить разные наборы данных, чтобы
отразить общую картину? Хорошо ли определены и реализованы отношения?
