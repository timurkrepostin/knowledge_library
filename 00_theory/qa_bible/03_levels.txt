** Пирамида / уровни тестирования (Test Pyramid / Testing Levels)
«Пирамида тестов» - метафора, которая означает группировку динамических тестов
программного обеспечения по разным уровням. Она также дает представление, какое
количество тестов должно быть в каждой из этих групп. Основной принцип разделения
уровней - тест должен быть на том же уровне, что и тестируемый объект. В тесте более
высокого уровня вы не тестируете всю условную логику и пограничные случаи, которые уже
покрыты тестами более низкого уровня.

Уровни тестирования:
1. Unit/component/program/module testing - тестируется минимально-атомарный модуль
программы, чаще всего это одна функция или метод. Таких тестов должно быть больше всего;
2. Integration testing - несколько модулей программы тестируются вместе;
3. System testing - вся программа тестируется полностью;
4. Acceptance testing - программа принимается заказчиком на соответствие заявленным
требованиям либо тестировщики проходят end-to-end сценарии с точки зрения пользователя;

** Модульное/юнит/компонентное тестирование (Module/Unit/Component testing)
Модульное тестирование (оно же юнит-тестирование) используется для тестирования какого-либо
одного логически выделенного и изолированного элемента системы (отдельные методы класса
или простая функция, subprograms, subroutines, классы или процедуры) в коде. Очевидно,
что это тестирование методом белого ящика и чаще всего оно проводится самими
разработчиками. Целью тестирования модуля является не демонстрация правильного
функционирования модуля, а демонстрация наличия ошибки в модуле, а также в определении
степени готовности системы к переходу на следующий уровень разработки и тестирования. 

Компонентное тестирование - тип тестирования ПО, при котором тестирование выполняется
для каждого отдельного компонента отдельно, без интеграции с другими компонентами.
Его также называют модульным тестированием (Module testing), если рассматривать его
с точки зрения архитектуры. Как правило, любое программное обеспечение в целом состоит
из нескольких компонентов. Тестирование на уровне компонентов (Component Level testing)
имеет дело с тестированием этих компонентов индивидуально. Это один из самых частых типов
тестирования черного ящика, который проводится командой QA. Для каждого из этих
компонентов будет определен сценарий тестирования, который затем будет приведен к
Test case высокого уровня -> детальным Test case низкого уровня с предварительными
условиями.

Module/Unit testing
1. Тестирование отдельных классов, функций для демонстрации того, что программа выполняется
согласно спецификации;
2. Проверка в(на) соответствии с design documents;
3. Пишутся и выполняются разработчиками;
4. Выполняется первым.

Component testing
1. Тестирование каждого объекта или частей программного обеспечения отдельно с или
без изоляции других объектов
2. Проверка в(на) соответствии с test requirements, use case
3. Тестировщиками
4. Выполняется после Unit

** Интеграционное тестирование (Integration testing)
Интеграционное тестирование (integration testing): Тестирование, выполняемое для
обнаружения дефектов в интерфейсах и во взаимодействии между интегрированными компонентами
или системами. 
Системное интеграционное тестирование (system integration testing): Тестировани
интеграции систем и пакетов программ, тестирование интерфейсов связи с внешними системами
(интернет и т.д.). 
Интеграционное тестирование предназначено для проверки насколько хорошо два или более
компонента ПО взаимодействуют друг с другом, а также взаимодействия с различными частями
системы (операционной системой, оборудованием либо связи между различными системами).

Уровни интеграционного тестирования:
1. Компонентный интеграционный уровень (CIT - Component Integration testing): Проверяется
взаимодействие между компонентами одной системы после проведения компонентного
тестирования.
2. Системный интеграционный уровень (SIT - System Integration testing): - это полное
тестирование всей системы, состоящей из множества подсистем. Основная цель SIT - обеспечить
правильное функционирование всех зависимостей программных модулей и сохранение целостности
данных между отдельными модулями всей системы.

Подходы к интеграционному тестированию:
1. Подход Большого взрыва (Big Bang Approach): “Вид подхода к интеграционному тестированию,
при котором элементы программного или аппаратного обеспечения, или и то и другое,
собираются в компонент или в целую систему сразу, а не по этапам.” ( IEEE 610).
Все или практически все разработанные модули собираются вместе в виде законченной системы
или ее основной части, и затем проводится интеграционное тестирование. Такой подход очень
хорош для сохранения времени. 
2. Инкрементальный подход (Incremental Approach): при таком подходе тестирование выполняется
путем объединения двух или более логически связанных модулей. Затем другие связанные
модули поэтапно добавляются и тестируются для правильного функционирования. Процесс
продолжается до тех пор, пока все модули не будут соединены и успешно протестированы.
Осуществляется разными методами:
2.1 Нисходящий подход (Top-Down Approach): Вначале тестируются все высокоуровневые модули,
и постепенно один за другим добавляются низкоуровневые. Все модули более низкого уровня
симулируются заглушками с аналогичной функциональностью, затем по мере готовности они
заменяются реальными активными компонентами. Преимущества: Локализация неисправностей
проще. Возможность получить ранний прототип. Основные недостатки дизайна могут быть
найдены и исправлены в первую очередь. Недостатки: Нужно много заглушек. Модули на более
низком уровне тестируются недостаточно;
2.2 Восходящий подход (Bottom-Up Approach): В восходящей стратегии каждый модуль на более
низких уровнях последовательно тестируется с более высокоуровневыми модулями, пока не
будут протестированы все модули. Требуется помощь драйверов для тестирования. Данный
подход считается полезным, если все или практически все модули, разрабатываемого уровня,
готовы. Также данный подход помогает определить по результатам тестирования уровень
готовности приложения. Пример низкоуровневого модуля - модуль, который заведует хранением
токенов авторизации. Высокоуровневый - модуль авторизации, в состав которого помимо прочего
входит модуль токенов. Преимущества: Локализация ошибок проще.

Тестирование интерфейса - это тип интеграционного теста, который проверяет, правильно ли
установлена ​​связь между двумя различными программными системами или их частями (модулями).
Соединение, которое объединяет два компонента, называется интерфейсом. Этот интерфейс в
компьютерном мире может быть чем угодно, как API, так и веб-сервисами и т. д. Тестирование
интерфейса включает в себя тестирование двух основных сегментов:
1. Интерфейс веб-сервера и сервера приложений
2. Интерфейс сервера приложений и базы данных

** Системное тестирование (System Testing)
Системное тестирование означает тестирование всей системы в целом, оно выполняется после
интеграционного тестирования, чтобы проверить, работает ли вся система целиком должным
образом. В основном это тестирование типа «черный ящик», которое оценивает работу системы
с точки зрения пользователя с помощью документа спецификации и оно не требует каких-либо
внутренних знаний о системе, таких как дизайн или структура кода.

Основное внимание уделяется следующему:
Внешние интерфейсы;
Многопрограммность и сложный функционал;
Безопасность;
Восстановление;
Производительность;
Гладкое (smooth) взаимодействие оператора и пользователя с системой;
Возможность установки;
Документация;
Удобство использование;
Нагрузка / стресс;

Зачем нужно системное тестирование?
1. Очень важно завершить полный цикл тестирования, и ST - это этап, на котором это делается;
2. ST выполняется в среде, аналогичной production environment, и, следовательно,
заинтересованные стороны могут получить хорошее представление о реакции пользователя;
3. Это помогает свести к минимуму устранение неполадок после развертывания и количество
обращений в службу поддержки;
4. На этом этапе STLC тестируются архитектура приложения и бизнес-требования. Это
тестирование очень важно, и оно играет важную роль в предоставлении клиенту качественного
продукта;

Критерии начала системного тестирования:
1. Система должна соответствовать критериям окончания интеграционного тестирования, то есть
все test cases должны быть выполнены, и не должно быть открытых критических ошибок или
ошибок с приоритетом P1, P2;
2. System Test Plan должен быть одобрен и подписан;
3. Test cases/scenarios/scripts должны быть готовы к выполнению;
4. Все нефункциональные требования должны быть доступны, и для них должны быть созданы
test cases;
5. Среда тестирования должна быть готова;

Критерии окончания системного тестирования:
1. Все test cases должны быть выполнены;
2. В открытом состоянии не должно быть критических, приоритетных или связанных с
безопасностью ошибок;
3. Если какие-либо ошибки со средним или низким приоритетом находятся в открытом состоянии,
они должны быть исправлены с согласия клиента;
4. Отчет о выходе (Exit Report) должен быть отправлен;

Чем отличается системное тестирование от сквозного (E2E - end-to-end testing)?
1. Сквозное тестирование - это методология тестирования программного обеспечения для
тестирования flow приложения от начала до конца. Целью сквозного тестирования является
моделирование реального пользовательского сценария и проверка тестируемой системы и ее
компонентов на предмет интеграции и целостности данных.
2. Системное тестирование - этап предпоследний этап STLC и уровень тестирования, а E2E
- подход к тестам. Обычно сквозные тесты выполняют после системного тестирования и перед
приемочным, а также после внесения изменений (smoke и regression). E2E выполняется от
начала до конца в реальных сценариях, таких как взаимодействие приложения с оборудованием,
сетью, базой данных и другими приложениями. Основная причина проведения этого тестирования
- определение различных зависимостей приложения, а также обеспечение передачи точной
информации между различными компонентами системы.

** Приемочное тестирование (AT - Acceptance testing)
● Приемочное тестирование (acceptance testing): Формальное тестирование по отношению к
потребностям, требованиям и бизнес процессам пользователя, проводимое с целью определения
соответствия системы критериям приемки и дать возможность пользователям, заказчикам или
иным авторизированым лицам определить, принимать систему или нет. (IEEE 610)
● Эксплуатационное приемочное тестирование (operational acceptance testing):
Эксплуатационное тестирование в фазе приемочного тестирования, обычно выполняемое
пользователем и/или сотрудниками с администраторским доступом, в рабочей среде
(возможно, стимулированной), фокусируясь на функциональных аспектах. Например,
восстанавливаемость, поведение ресурсов, устанавливаемость и техническое соответствие.

После того, как процесс тестирования системы завершен командой тестирования, весь продукт
передается клиенту и/или нескольким его пользователям для проверки приемлемости
(acceptability). Е2Е бизнес-потоки проверяются аналогично в сценариях в реальном времени.
Подобная производственной среда будет тестовой средой для приемочного тестирования
(Staging, Pre-Prod, Fail-Over, UAT environment). Это метод тестирования черного ящика,
при котором проверяется только функциональность, чтобы убедиться, что продукт соответствуе
указанным критериям приемки.

Виды приемочного тестирования:
1. Пользовательское приемочное тестирование (UAT - User Acceptance Testing, validation,
end-user testing) выполняется пользователем или клиентом чтобы определить, может ли ПО
быть принято (accepted) или нет и проверить ПО на соответствие бизнес-требованиям.
2. Бизнес - приемочное тестирование (BAT - Business Acceptance Testing) необходимо для
оценки того, соответствует ли Продукт бизнес-целям и задачам. BAT в основном фокусируется
на бизнес-преимуществах (финансах), которые являются довольно сложными из-за меняющихся
рыночных условий / прогрессирующих технологий
3. Контрактное приемочное тестирование (CAT - Contract Acceptance Testing) - это контракт,
который определяет, что после того, как Продукт будет запущен в течение заранее определенного
периода, должен быть проведен приемочный тест, и он должен пройти все приемочные тест-кейсы.
Подписанный здесь контракт называется Соглашением об уровне обслуживания (SLA), которое
включает условия, по которым платеж будет производиться только в том случае, если услуги
Продукта соответствуют всем требованиям, что означает, что контракт выполнен.
4. Правовое приемочное тестирование (RAT - Regulations/Compliance Acceptance Testing)
необходимо для оценки того, нарушает ли Продукт правила и нормы, установленные
правительством страны, в которой он выпускается. Это может быть непреднамеренным, но
отрицательно скажется на бизнесе. Обычно разрабатываемый Продукт / приложение,
предназначенный для выпуска во всем мире, должен пройти RAT, поскольку в разных странах
/ регионах действуют разные правила и положения, определенные его руководящими органами.
5. Эксплуатационное приемочное тестирование (OAT - Operational Acceptance testing)
- это тип тестирования программного обеспечения, который оценивает эксплуатационную
готовность программного приложения до его выпуска в производство. Целью эксплуатационного
тестирования является обеспечение бесперебойной работы системы в ее стандартной
эксплуатационной среде (SOE - standard operating environment). В основном это тестирование
восстановления, совместимости, ремонтопригодности, доступности технической поддержки,
надежности, восстановления после сбоя, локализации и т. д (recovery, compatibility,
maintainability, technical support availability, reliability, fail-over, localization);
6. Альфа-тестирование (Alpha Testing) проводят для оценки продукта в среде разработки /
тестирования специализированной командой тестировщиков, обычно называемой альфа-тестерами.
Здесь отзывы и предложения тестировщиков помогают улучшить использование Продукта,
а также исправить определенные ошибки;
7. Бета-тестирование, полевые испытания (Beta Testing, Field Testing) проводят для оценки
Продукта, предоставляя его реальным конечным пользователям, обычно называемым
бета-тестерами / бета-пользователями, в их среде. Собирается постоянная обратная связь
от пользователей, и проблемы устраняются. Кроме того, это помогает в улучшении Продукта,
чтобы обеспечить удобство работы пользователей. Тестирование происходит неконтролируемым
образом, что означает, что у пользователя нет ограничений на использование Продукта;
