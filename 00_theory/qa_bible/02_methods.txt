** Методы тестирования (White/Black/Grey Box)
Самым высоким уровнем в иерархии подходов к тестированию будет понятие метода.
Некоторые виды тестирования могут выполняться методом как черного ящика, так и белого.
Если упростить, то отличаются они знанием внутреннего устройства объекта тестирования.

** Тестирование методом черного ящика (Black Box Testing)
Тестирование методом черного ящика (black box testing): Тестирование, функциональное
или нефункциональное, без знания внутренней структуры компонента или системы (ISTQB).

● Тестирование методом «черного ящика» - это стратегия, в которой тестирование основано
исключительно на требованиях и спецификациях, при этом мы не знаем, как устроена внутри
тестируемая система и работаем исключительно с внешними интерфейсами тестируемой системы
или компонента. Тестирование черного ящика может быть применено на всех уровнях
- модульном, интеграционном, системном и приемочном.

Преимущества Black box testing:
1. Тестировщику не обязательно иметь технический опыт. Важно проводить тестирование,
оказываясь на месте пользователя и думая с его точки зрения;
2. Тестирование можно начинать после завершения разработки проекта / приложения.
И тестировщики, и разработчики работают независимо, не мешая друг другу;
3. Это более эффективно для больших и сложных приложений;
4. Дефекты и несоответствия можно выявить на ранней стадии тестирования;

Недостатки Black box testing:
1. Без каких-либо технических или программных знаний есть вероятность пропустить возможные
условия тестируемого сценария;
2. В оговоренное время есть вероятность протестировать не все входные и выходные значения;
3. Полный Test Coverage невозможен для больших и сложных проектов;

** Тестирование методом белого ящика (White Box Testing)
● Тестирование методом белого ящика (white-box testing): Тестирование, основанное на анализе
внутренней структуры компонента или системы (ISTQB).
Тестирование методом белого ящика (также: прозрачного, открытого, стеклянного ящика;
основанное на коде или структурное тестирование) - метод тестирования ПО, который
предполагает, что внутренняя структура/устройство/реализация системы известны тому,
кто её тестирует. Мы выбираем входные значения, основываясь на знании кода, который будет
их обрабатывать. Точно так же мы знаем, каким должен быть результат этой обработки.
Знание всех особенностей тестируемой программы и ее реализации - обязательны для этой
техники. Тестирование белого ящика - углубление во внутреннее устройство системы, за
пределы ее внешних интерфейсов.
● Техника белого ящика применима на разных уровнях тестирования - модульном, интеграционном
и системном, но чаще применяется для юнит-тестирования этого участка кода самим
разработчиком или SDET. Тестирование белого ящика - это больше, чем тестирование кода:
это тестирование путей.​ Обычно тестируемые пути находятся внутри модуля (модульное
тестирование). Но мы можем применить эту же методику для тестирования путей между модулями
внутри подсистем, между подсистемами внутри систем, и даже между целыми системами.

Процесс White box testing:
1. Анализируется реализация программы;
2. В программе определяются возможные маршруты;
3. Выбираются такие входные данные, чтобы программа выполнила выбранные пути.
Это называется сенсибилизацией путей. Заранее определяются ожидаемые результаты для
входных данных;
4. Тесты выполняются;
5. Результаты анализируются;

Преимущества White box testing:
1. тестирование может производиться на ранних этапах: нет необходимости ждать создания
пользовательского интерфейса;
2. можно провести более тщательное тестирование, с покрытием большого количества путей
выполнения программы;

Недостатки White box testing:
1. Количество выполняемых путей может быть настолько большим, что не удастся проверить
их все. Как правило, попытка протестировать все пути выполнения с помощью тестирования
белого ящика так же невозможна, как и тестирование всех комбинаций всех входных данных
при тестировании черного ящика;
2. Тестировщик должен обладать навыками программирования для того, чтобы понять и
оценить тестируемое программное обеспечение;

White box testing нужно:
Чтобы убедиться, что:
1. Все независимые пути в модуле были проверены хотя бы один раз;
2. Все логические решения проверены на их истинное и ложное значения;
3. Все циклы выполняются на своих границах и в пределах своих рабочих границ валидности
внутренних структур данных;

** Тестирование методом серого ящика (Grey Box Testing)
В целом оно определяется как метод тестирования ПО, который предполагает комбинацию
White Box и Black Box подходов или как дополненный черный ящик. Т.е., внутреннее
устройство/код известны/используется лишь частично, и, например, имея доступ к внутренней
структуре и алгоритмам работы ПО, можно написать более эффективные тест-кейсы, но само
тестирование проводится с помощью техники черного ящика, то есть, с позиции пользователя.

Техники:
1. Матричное тестирование (Matrix Testing): разработчики предоставляют все переменные
в программе, а также связанные с ними технические и бизнес-риски. Методика матричного
тестирования проверяет риски, определенные разработчиками. Матричный метод устанавливает
все используемые переменные в программе. Этот метод помогает идентифицировать и удалять
переменные, которые не используются в программе, и, в свою очередь, помогает увеличить
скорость работы программного обеспечения;
2. Регрессионное тестирование (Regression Testing): регрессионное тестирование выполняется,
когда в программное обеспечение вносятся какие-либо изменения или исправляется какой-либо
дефект. Это делается для того, чтобы новое изменение или исправление не повлияло на
существующие функциональные возможности программного обеспечения;

** Статическое и динамическое тестирование (Static Testing, Dynamic Testing)
● Статическое тестирование (Static Testing, Non-execution technique или verification)
подразумевает проверку вручную или с помощью инструментов программного кода без его
запуска, а также проверку документации.
Почему требуется статическое тестирование:
1. Обнаружение ошибок / недостатков на ранних этапах: при создании ПО нельзя полагаться
исключительно на динамическое тестирование, поскольку оно выявляет ошибки или недостатки
программного продукта на более позднем этапе, что может стоить разработчикам много времени
и усилий для отладки;
2. Динамическое тестирование занимает много времени: несмотря на то, что динамическое
тестирование выявляет ошибку и предоставляет некоторые подробности относительно ошибки,
исправление ошибки по-прежнему требует времени и усилий, поскольку оно включает в себя
обнаружение сбоя от тестового примера до основной причины, что в целом усложняет процесс;
3. Динамическое тестирование дорогое: как упоминалось ранее, для динамического
тестирования требуются тестовые примеры, и выполнение этого само по себе является
дорогостоящим, потому что тестовые примеры должны быть сначала созданы, затем выполнены
и проверены, а также должны поддерживаться, что требует большой работы со стороны
тестировщиков;

● Динамическое тестирование (Dynamic Testing, Execution technique или validation)
подразумевает запуск кода для проведения функциональных и нефункциональных проверок ПО.
Основная цель этого тестирования - подтвердить, что программный продукт работает
в соответствии с требованиями бизнеса. Преимуществами динамического тестирования являются
выявление сложных дефектов, которые не могут быть обнаружены статическим тестированием,
обнаружение угроз безопасности, проблем с производительностью и т.п.
