** Виды тестовой документации
● Тестовая поставка (test deliverable): Любой тестовый (рабочий) продукт, который
должен быть доставлен кому-то другому, кроме автора тестового (рабочего) продукта. (ISTQB)
● Тестовое обеспечение (testware): Артефакты, создаваемые во время процесса тестирования
и требующиеся для планирования, разработки и выполнения тестов. Например: документация,
сценарии, входы, ожидаемые результаты, процедуры установки и удаления, файлы, базы данных,
окружение и любое другое дополнительное программное обеспечение или инструменты,
используемые в тестировании. (Fewster and Graham)
● Артефакт (artifact) - это один из многих видов материальных побочных продуктов,
возникающих в процессе STLC. Это не только документация, а в принципе всё, что создаётся
для того, чтобы быть задействованным в тестировании.

● Результаты тестирования (Test Deliverables) - это артефакты, которые передаются
заинтересованным сторонам проекта программного обеспечения в течение жизненного цикла
разработки программного обеспечения. На каждом этапе жизненного цикла разработки
программного обеспечения существуют разные результаты тестирования. Некоторые результаты
тестирования предоставляются до этапа тестирования, некоторые - на этапе тестирования,
а некоторые - после завершения циклов тестирования.

По Куликову документацию можно разделить на два больших вида в зависимости от времени
и места ее использования:
● Продуктная документация (product documentation, development documentation) используется
проектной командой во время разработки и поддержки продукта. Она включает:
1. План проекта (project management plan) и в том числе тестовый план (test plan);
2. Требования к программному продукту (product requirements document, PRD) и
функциональные спецификации (functional specifications document, FSD; software
requirements specification, SRS);
3. Архитектуру и дизайн (architecture and design);
4. Тест-кейсы и наборы тест-кейсов (test cases, test suites);
5. Технические спецификации (technical specifications), такие как схемы баз данных,
описания алгоритмов, интерфейсов и т.д.;
● Проектная документация (project documentation) включает в себя как продуктную
документацию, так и некоторые дополнительные виды документации и используется не только
на стадии разработки, но и на более ранних и поздних стадиях (например, на стадии
внедрения и эксплуатации). Она включает:
1. Пользовательскую и сопроводительную документацию (user and accompanying documentation),
такую как встроенная помощь, руководство по установке и использованию, лицензионные
соглашения и т.д.;
2. Маркетинговую документацию (market requirements document, MRD), которую представители
разработчика или заказчика используют как на начальных этапах (для уточнения сути
и концепции проекта), так и на финальных этапах развития проекта (для продвижения
продукта на рынке).

Виды документации:
● Политика качества (Quality policy): отражает видение компании в отношении производства
и поставки качественного продукта;
● Политика тестирования (Test policy): документ высокого уровня, в котором описаны
принципы, методы и все важные цели тестирования в организации;
● Стратегия тестирования (Test strategy): статический документ документ высокого уровня
(high-level), обычно разрабатываемый менеджером проекта (project manager). Это документ,
который отражает подход к тестированию продукта и достижению целей. Обычно он выводится
из Спецификации бизнес-требований (BRS - Business Requirement Specification). На основе
стратегии тестирования готовится План тестирования;
● План тестирования (Test plan): документ, который содержит план всех действий по
тестированию, которые необходимо выполнить для получения качественного продукта.
План тестирования является производным от описания продукта (Product Description),
SRS (Software requirements specification) или сценариев использования (Use Case) для
всех будущих действий проекта. Обычно его готовит руководитель тестирования или менеджер
по тестированию (Test Lead or Test Manager);
● Отчет об оценке усилий (Effort Estimation Report): в этом отчете группы тестирования
оценивают усилия для завершения процесса тестирования;
● Сценарий тестирования (Test Scenario): элемент или событие программной системы,
которое может быть проверено одним или несколькими тестовыми случаями;
● Тестовый набор/комплект (Test Suite): “Комплект тестовых наборов для исследуемого
компонента или системы, в котором обычно постусловие одного теста используется в качестве
предусловия для последующего.” (ISTQB). Некоторый набор формализованных Test case,
объединенных между собой по общему логическому признаку;
● Тестовый случай/пример (Test case): набор положительных и отрицательных исполняемых
шагов тестового сценария, который имеет набор предварительных условий, тестовых данных,
ожидаемого результата, пост-условий и фактических результатов;
● Тест сурвей (Test Survey): в рунете только один источник о нем, но есть упоминания
в истории чатов коммьюнити. Test Survey по детализации занимает место посередине между
чек-листом и тест-кейсом, а именно содержит в себе только summary и expected result.
Т.е. подробнее чек-листов, где только заголовки, но с ожидаемым результатом и без шагов
и прочего как в тест-кейсах;
● Чек-лист (Check List): перечень формализованных Test case в упрощенном виде удобном
для проведения проверок, часто только список из заголовков кейсов;
● Матрица прослеживаемости требований (Requirements Traceability Matrix): документ,
который соотносит требования с тестовыми примерами;
● Тестовые данные (Test Data): “данные, которые существуют (например, в базе данных)
на начало выполнения теста и влияют на работу, или же испытывают влияние со стороны
тестируемой системы или компонента.” (ISTQB). “Созданные или отобранные данные,
удовлетворяющие входным требованиям для выполнения одного или более контрольных примеров,
которые могут быть определены в плане тестирования, контрольном примере или процедуре
тестирования.” (ГОСТ 56920)
● Отчет о дефектах (Defect Report): цель документа заключается в том, чтобы зафиксировать
факт ошибки и передать разработчикам подробную информацию о ней;
● Отчет о выполнении теста (Test Execution Report): содержит результаты тестирования
и сводку действий по выполнению тестов;
● Сводный отчет о тестировании (Test summary report): представляет собой документ высокого
уровня, в котором резюмируются проведенные действия по тестированию, а также результаты
тестирования;
● Графики и метрики (Graphs and Metrics): предназначены для мониторинга и управления
процессом и продуктом. Это помогает без отклонений вести проект к намеченным целям.
Метрики отвечают на разные вопросы. Важно решить, на какие вопросы вы хотите получить
ответы;
● Отчет о тестовых инцидентах (Test incident report): содержит все инциденты, разрешенные
или неразрешенные, обнаруженные во время тестирования;
● Отчет о завершении тестирования (Test closure report): содержит подробный анализ
обнаруженных ошибок, удаленных ошибок и несоответствий, обнаруженных в программном
обеспечении;
● Отчет о статусе тестирования (Test status report): предназначен для отслеживания
статуса тестирования. Его готовят периодически или еженедельно. В нем указаны работы,
выполненные до настоящего времени, и работы, которые еще не завершены;
● Еженедельный отчет о статусе (менеджер проекта для клиента): Weekly status report
похож на отчет о статусе тестирования, но генерируется еженедельно;
● Отчет об улучшении (?Enhancement report): описание неявных/некритичных косвенных
требований, которые не были учтены при планировании/реализации продукта, но несоблюдение,
которых может вызвать неприятие у конечного потребителя;
● Запрос на модификацию (Modification Request): запрос клиента на изменение существующей
функциональности;
● Примечания к выпуску (Release Note): примечания к выпуску будут отправлены клиенту,
заказчику или заинтересованным сторонам вместе со сборкой. Он содержит список новых
выпусков, исправления ошибок;
● Руководство по установке / настройке (Installation/configuration guide): это
руководство помогает установить или настроить компоненты, из которых состоит система,
и ее аппаратные и программные требования;
● Руководство пользователя (User guide): это руководство помогает конечному пользователю
понять как пользоваться продуктом;
● Различные документы требований.

** Политика качества и политика тестирования (Quality policy and Test policy)
Политика Тестирования выражает в бизнес-терминах ожидания менеджмента организации и
подход к тестированию программного обеспечения. Она ориентирована на руководителей и
старших менеджеров, хотя и может быть полезна для каждого, кто связан с тестированием.
Политика Тестирования также руководит предпочтительным направлением и динамикой
формирования и выполнения Организационной Стратегии Тестирования и процессов тестирования
организации. (ГОСТ 56920)

** Стратегия тестирования (Test strategy)
Стратегия тестирования (test strategy): Высокоуровневое описание уровней тестирования,
которые должны быть выполнены, и тестирования, входящего в эти уровни, для организации
или программы из одного или более проектов. (ISTQB)
Стратегия тестирования - это статический документ высокого уровня, обычно разрабатываемый
менеджером проекта. Это документ, который отражает подход к тестированию продукта и
достижению целей, и дает четкое представление о том, что команда тестирования будет
делать для всего проекта. Обычно он выводится из Спецификации бизнес-требований (BRS).

● Обзор и объем (Scope and overview): объем работ по тестированию (что тестировать
и зачем тестировать) и обзор тестируемого продукта;
● Подход к тестированию (Test Approach):
1. Уровни тестирования (Test levels);
2. Виды тестирования (Test Types);
3. Роли и обязанности (Roles and responsibilities);
4. Требования к окружениям (Environment requirements);
● Инструменты тестирования (Testing tools): инструменты, необходимые для проведения
тестов (TMS, багтрекинговая система, стек автоматизации);
● Отраслевые стандарты, которым необходимо следовать (Industry standards to follow):
В этом разделе описывается отраслевой стандарт для производства высококачественной
системы, которая соответствует ожиданиям клиентов или превосходит их. Обычно менеджер
проекта определяет модели и процедуры тестирования, которым необходимо следовать для
достижения целей проекта;
● Результаты тестирования (Test deliverables): документация, которую необходимо создать
до, во время и по окончании тестирования;
● Метрики тестирования (Testing metrics): метрики, которые следует использовать в проекте
для анализа статуса проекта;
● Матрица отслеживания требований (RTM);
● Риски и способы их снижения (Risk and mitigation): все риски тестирования и план по
их снижению;
● Инструмент отчетности (Reporting tool): как будут отслеживаться дефекты и проблемы;
● Результаты тестов (Test Summary): виды сводных отчетов о тестах, которые будут
создаваться, с указанием периодичности. Сводные отчеты о тестах будут генерироваться
ежедневно, еженедельно или ежемесячно, в зависимости от критичности проекта.

** План тестирования (Test plan)
● “План тестирования (test plan): Документ, описывающий цели, подходы, ресурсы и график
запланированных тестовых активностей. Он определяет объекты тестирования, свойства для
тестирования, задания, ответственных за задания, степень независимости каждого
тестировщика, тестовое окружение, метод проектирования тестов, определяет используемые
критерии входа и критерии выхода и причины их выбора, а также любые риски, требующие
планирования на случай чрезвычайных обстоятельств.” (IEEE 829)
● В то время как стратегия излагает общие принципы или теорию, план детально описывает
практические аспекты того, как проект будет протестирован в реальности.

Шаблон тест-плана:
Какие ресурсы требуются и когда;
Когда задачи нужно начинать и заканчивать, и кто их будет выполнять;
Навыки, необходимые для выполнения задач;
Инструменты и технологии, поддерживающие план;
Результаты и когда они будут доставлены;
Затраты на усилия и необходимые ресурсы;
Процесс продвижения проекта / процесса по стадиям;
Риски, угрожающие доставке.

Виды тест-планов:
● Мастер Тест-План (Master Test Plan): “Главный план тестирования (master test plan,
project test plan): План тестирования, обычно охватывающий несколько уровней тестирования.” (ISTQB).
Это может быть как единственный базовый план, так и главный в иерархии нескольких планов,
самый статичный и высокоуровневый. Нужен когда:
1. продукт имеет множество релизов или итераций, между которыми сохраняется общая
информация, которую нет смысла повторять;
2. различные тестовые команды работают над одним продуктом, выполняя различные задачи,
которые необходимо объединить в рамках одного документа;
● Детальный Тест-план (Phase Test plan): “Уровневый план тестирования (level test plan):
План тестирования, обычно относящийся к одному уровню тестирования.” (ISTQB). Детальный
план составляется на каждый релиз/итерацию или для каждой команды в рамках проекта и
является динамическим, т.е. может претерпевать изменения по необходимости. Его основная
цель - кратко и доходчиво отразить задачи тестирования.
● План приемочных испытаний (Acceptance Test Plan, ПСИ): план приемочного тестирования
отличают от обычного плана тестирования факторы, которые приводят к принятию
бизнес-решения. План приемочного тестирования - это один из жизненно важных документов,
который содержит руководство по выполнению приемочного тестирования для конкретного
проекта. Пишется на основе бизнес-требований (Business Requirements). Ревью этого плана
обычно выполняется by Managers/Business Analysts/Customers.

** Тестовый сценарий (Test scenario)
● Сценарий выполнения (test scenario): См. спецификация процедуры тестирования. (ISTQB)
● Спецификация процедуры тестирования (test procedure specification): Документ,
описывающий последовательность действий при выполнении теста. Также известен как ручной
сценарий тестирования. (IEEE 829) См. также спецификация теста
● Спецификация теста (test specification): Документ, состоящий из спецификации
проектирования теста, спецификации тестовых сценариев и/или спецификации процедуры
тестирования (ISTQB)

● Тестовый сценарий (Test scenario) - последовательность действий над продуктом, которые
связаны единым ограниченным бизнес-процессом использования, и сообразных им проверок
корректности поведения продукта в ходе этих действий. Иными словами, это последовательность
шагов, которые пользователь может предпринять, чтобы использовать ваше программное
обеспечение. Сценарии тестирования должны учитывать все возможные способы выполнения
задачи (функции) и охватывать как положительные, так и отрицательные тестовые примеры,
потому что конечные пользователи могут не обязательно предпринимать шаги, которые вы от
них ожидаете. Используя тестовые сценарии, мы оцениваем работу приложения с точки зрения
конечного пользователя. Фактически при успешном прохождении всего тестового сценария
мы можем сделать заключение о том, что продукт может выполнять ту или иную возложенную
на него функцию.

Как писать сценарии:
1. Тщательно ознакомьтесь с требованиями (Спецификация бизнес-требований (BRS),
Спецификация требований к программному обеспечению (SRS), Спецификация функциональных
требований (FRS)) тестируемой системы (SUT), use cases, книгами, руководствами и т. д.;
2. Для каждого требования выясните, как пользователь может использовать программное
обеспечение всеми возможными способами;
3. Составьте список сценариев тестирования для каждой функции тестируемого приложения
(AUT);
4. Создайте матрицу прослеживаемости и свяжите все сценарии с требованиями. Это позволит
вам определить, сопоставлены ли все требования с тестовыми сценариями или нет;
5. Отправьте сценарии тестирования руководителю, чтобы он рассмотрел и оценил их. Даже
сценарии тестирования дополнительно проверяются всеми заинтересованными сторонами.

Не стоит путать Test scenario с Test Suite (набор тестов, тест-свит).
● Набор тестов (test suite): Комплект тестовых наборов для исследуемого компонента или
системы, в котором обычно постусловие одного теста используется в качестве предусловия
для последующего. (ISTQB)
● Test Suite - это некоторый набор формализованных Test case, объединенных между собой
по общему логическому признаку, которые позволяют проверить одну из частей или вариантов
сценария. Test Scenario представляет собой некий пользовательский сценарий по тестированию
некой функциональности. Что-то, что пользователь может захотеть сделать с вашей системой,
и вы хотите это проверить. Сценарий может иметь один или несколько Test Suite.

** Тест-кейс (Test case)
● Тестовый сценарий (test case): Набор входных значений, предусловий выполнения, ожидаемых
результатов и постусловий выполнения, разработанный для определенной цели или тестового
условия, таких как выполнения определенного пути программы или же для проверки
соответствия определенному требованию. (IEEE 610)
● Тестовый сценарий высокого уровня (high level test case): Тестовый сценарий без
конкретных (уровня реализации) значений входных данных и ожидаемых результатов.
Использует логические операторы, а экземпляры реальных значений еще не определены и/или
доступны. (ISTQB)
● Тестовый сценарий низкого уровня (low level test case): Тестовый сценарий с конкретными
(уровня реализации) значениями входных данных и ожидаемых результатов. Логические
операторы из тестовых сценариев высокого уровня заменяются реальными значениями, которые
соответствуют целям этих логических операторов. (ISTQB)
● Test case (тест-кейс, тестовый пример/случай) - это артефакт, описывающий совокупность
шагов, конкретных условий и параметров, необходимых для проверки реализации тестируемой
функции или ее части. Более строго - формализованное описание одной показательной
проверки на соответствие требованиям прямым или косвенным.

Содержание тест-кейса:
● Идентификатор набора тестов (Test Suite ID): Идентификатор набора тестов, в которых
входит этот кейс;
● Идентификатор тестового кейса (Test Case ID): Идентификатор самого кейса;
● Заголовок кейса (Test Case Summary): Краткое и емкое название проводимой проверки;
● Связанное требование (Related Requirement): Идентификатор требования, к которому
относится / отслеживается данный тестовый пример;
● Предварительные условия (Prerequisites): Любые предпосылки или предварительные условия,
которые должны быть выполнены перед выполнением теста;
● Шаги выполнения (Test Script / Procedure): Шаги выполнения теста;
● Тестовые данные (Test Data): Тестовые данные или ссылки на тестовые данные, которые
должны использоваться при проведении теста;
● Ожидаемый результат (Expected Result): результат, который мы ожидаем получить после
выполнения шагов теста;
● Статус пройден или не пройден (Status): Другие статусы могут быть «Не выполнено»,
если тестирование не проводится, и «Заблокировано», если тестирование заблокировано;
● Заметки (Remarks): Любые комментарии к тесту или выполнению теста;
● Создано (Created By): Имя автора тестового примера;
● Дата создания (Date of Creation): Дата создания тестового примера (опционально
модификации);
● Выполнено (Executed By): Имя человека, выполнившего тест;
● Дата выполнения (Date of Execution): Дата выполнения теста;
● Тестовое окружение (Test Environment): оборудование / программное обеспечение / сеть,
в которых выполнялся тест, т.е. все необходимые сведения об окружении, чтобы можно
было воспроизвести полученный результат.

** В иностранной литературе часто делят кейсы на две категории:
● Высокоуровневый тест-кейс (high level test case или logical test case) - тест-кейс без
конкретных входных данных и ожидаемых результатов. Как правило, ограничивается общими
идеями и операциями, схож по своей сути с подробно описанным пунктом чек-листа.
Достаточно часто встречается в интеграционном тестировании и системном тестировании,
а также на уровне smoke. Может служить отправной точкой для проведения исследовательского
тестирования или для создания низкоуровневых тест-кейсов.
● Низкоуровневый тест-кейс (low level test case) - тест-кейс с конкретными входными
данными и ожидаемыми результатами. Представляет собой «полностью готовый к выполнению»
тест-кейс и вообще является наиболее классическим видом тест-кейсов. Начинающих
тестировщиков чаще всего учат писать именно такие тесты, т.к. прописать все данные
подробно - намного проще, чем понять, какой информацией можно пренебречь, при этом не
снизив ценность тест-кейса.

** Чек-лист (Check List)
Контрольный список/лист проверок - это список проверок, которые помогают тестировщику
протестировать приложение или отдельные функции. Основная цель чеклиста состоит в том,
чтобы вы не забыли проверить всё, что планировали. Классический чеклист состоит из:
1-й столбец: заголовки тест-кейсов, структурированные по разделам/функционалу, или любые
определенные составителем пункты;
2-й столбец для отметки: pass/fail;
3-й столбец опционально под заметки.
Если чек-лист используется еще и для наглядного отображения хода тестирования
(а-ля test run), 2-й столбец может иметь опции: пусто (еще не проверялось)/успех/ошибка/пропущено
или заблокировано (например, другим дефектом).
Чек-лист не обязательно является некоторой заменой тест-кейсов, это более глобальная
сущность, в виде которой можно записывать множество планов и предстоящих действий:
критерии начала и окончания тестирования, проверки перед началом каждой фазы, действия
по их завершении, подспорье при исследовательском тестировании, накидать проверок
с mind map функционала продукта, шеринг опыта с коллегами и т.п.

** Баг-репорт (Defect/bug report)
● Отчет о дефекте (defect report): Документ, содержащий отчет о любом недостатке в
компоненте или системе, который может привести компонент или систему к невозможности
выполнить требуемую функцию. (IEEE 829)
● «Смысл написания отчета о проблеме (отчета об ошибке) состоит в том, чтобы исправить
ошибки» - Джем Канер. Если тестировщик неправильно сообщает об ошибке, то программист,
скорее всего, отклонит эту ошибку, заявив, что она невоспроизводима. Или потратит кучу
лишнего времени на то, чтобы сделать вашу работу за вас. Едва ли такой тестировщик будет
выгоден бизнесу, приятен коллегам и долго задержится на своем месте.

Главное при написании отчета - он должен быть сразу и однозначно понят читающим,
а дефект однозначно воспроизведен по указанным шагам в указанном окружении.
Основные поля баг-репорта:
Уникальный идентификатор (ID);
Описание (Summary): краткое, емкое и понятное описание ошибки;
Окружение (Environment): ссылка на билд/коммит/версия ПО и всего окружения;
Шаги воспроизведения (Steps to reproduce): полный перечень шагов для воспроизведения;
Ожидаемый результат (Expected result): какой результат должен был быть без ошибки;
Фактический результат (Actual result): какой результат получился на самом деле;
Вложения (Attachments): логи, скриншоты, видео - всё что необходимо для понимания ошибки.
Дополнительные:
Предварительные условия (Prerequisites);
Тестовые данные (Test Data);
Серьезность дефекта (Defect Severity);
Комментарии (Remarks);
Проект (Project);
Продукт (Product);
Версия релиза (Release Version);
Модуль (Module);
Обнаружено в версии (Detected Build Version);
Вероятность возникновения дефекта (Defect Probability);
Приоритет дефекта (Defect Priority);
Автор отчета (Reported By);
Назначено на (Assigned To);
Статус (Status);
Fixed Build Version.

Несколько ключевых моментов, которые следует учитывать при написании отчета об ошибке:
В одном отчете один баг;
Воспроизведите его 2-3 раза;
Убедитесь, что используете актуальную версию ПО и окружения;
Проверьте по поиску багтрекинговой системы наличие отчета о таком же дефекте;
Локализуйте ошибку, чтобы выяснить ее первопричину;
Напишите подробные шаги и полное окружение для воспроизведения ошибки;
Напишите хорошее summary дефекта по формуле “Что? Где? При каких условиях?” 

** Критерии приемки (Acceptance Criteria)
● Критерии приемки (acceptance criteria): Критерии выхода, которым должны соответствовать
компонент или система, для того, чтобы быть принятыми пользователем, заказчиком или
другим уполномоченным лицом. (IEEE 610)
● Критерии приемки - это условия, которым должен удовлетворять программный продукт, чтобы
быть принятым пользователем, заказчиком или, в случае функциональности системного уровня,
потребляющей системой. Проще говоря - это список деталей (также известных как требования)
о том, как новая функция (feature) программного обеспечения должна работать / выглядеть.
Это гарантирует, что:
1. Функция разработана хорошо. В противном случае важный или полезный аспект может быть
упущен - и никто этого не заметит до самого конца.
2. Это работает так, как было задумано. Если описание расплывчато, разработчикам, возможно,
придется сделать предположения о том, как должна работать каждая область. С критериями
приемки разработчики точно знают, какой дизайн и функциональность ожидаются.
3. QA знает, чего ожидать во время тестирования. Даже если функция не выглядит сломанной,
она может работать не так, как хотели менеджеры по продукту. Если критерии приемки
отсутствуют, тестировщики не могут сообщать о подобных проблемах.

** Виды отчетов (Reports)
● Отчет - это документ, содержащий информацию о выполненных действиях, результатах
проведённой работы. Обычно он включает в себя таблицы, графики, списки, просто
описывающую информацию в виде текста. Их пропорция и содержание определяют пользу
и понятность отчета.
Нам важно понять, для кого, для чего и в каких условиях мы это делаем и на сколько это
улучшит восприятие излагаемой нами информации. Надо помнить, что каждое действие
преследует определенную цель. В случае отчета нам важно понять, для кого, для чего и в
каких условиях мы это делаем.

Отчет по инциденту (incident report)
Отчет по инциденту (incident report): Документ, описывающий событие, которое произошло,
например, во время тестирования, и которое необходимо исследовать. (IEEE 829)
Отчет об инцидентах можно определить как письменное описание инцидента, наблюдаемого
во время тестирования. Чтобы лучше понять, давайте начнем с того, что такое «инцидент».
Инцидент при тестировании программного обеспечения можно определить как наблюдаемое
изменение или отклонение поведения системы от ожидаемого. Это может быть отклонение от
функционального требования или от настроек среды. Очень часто инцидент называют дефектом
или ошибкой, но это не всегда так. Инцидент - это в основном любое неожиданное поведение
или реакция программного обеспечения, требующая расследования.

Отчет о результатах тестирования (test result report)
Отчет о результатах тестирования - периодический отчет, в котором документируется
подробная информация о выполнении теста и его результате. Также он содержит условия,
предположения, ограничения теста, какой элемент теста кем тестируется. Помимо этого
вносится подробная информация об оставшейся работе, чтобы показать, сколько еще работы
необходимо выполнить в проекте.

Отчет о выполнении теста (Test Execution Report)
Отчет о выполнении теста содержит детали выполнения и результат выполнения теста.
Обычно его готовят для отправки вышестоящему руководству от группы тестирования, чтобы
показать состояние выполнения теста и ход тестирования. Когда мы доставляем программное
обеспечение клиенту, мы вкратце отправим полную информацию о выполнении теста. Это даст
клиенту лучшее понимание выполненного теста и покрытия.

Отчет о ходе тестирования (test progress report)
Отчет о ходе тестирования (test progress report): Документ, подводящий итог задачам
и результатам, составляемый с определенной периодичностью с целью сравнения прогресса
тестирования с базовой версией (например, с исходным планом тестирования) и извещения
о рисках и альтернативах, требующих решения руководства. (ISTQB)

Аналитический отчет о тестировании (test evaluation report)
Аналитический отчет о тестировании (test evaluation report): Документ, создаваемый в
конце процесса тестирования и подводящий итог тестовым активностям и результатам. Также
в нем содержится оценка процесса тестирования и полученный опыт. (ISTQB)

Итоговый отчет о тестировании (test summary report)
Итоговый отчет о тестировании (test summary report): Документ, подводящий итог задачам
и результатам тестирования, также содержащий оценку соответствующих объектов тестирования
относительно критериев выхода. (IEEE 829)
Сводный отчет о тестировании содержит подробную информацию о тестировании, проведенном
на протяжении жизненного цикла разработки программного обеспечения. Элементы в итоговом
отчете по тестированию различаются от организации к организации, а также различаются
для разных проектов. Информация в отчете об испытаниях основывается на аудитории отчета
об испытаниях. Аудитория может быть клиентом, менеджментом, бизнес-аналитиком,
разработчиками, членами команды тестирования, членами организации и т. д.

Итоговый отчет о тестировании (test summary report)
Итоговый отчет о тестировании (test summary report): Документ, подводящий итог задачам
и результатам тестирования, также содержащий оценку соответствующих объектов тестирования
относительно критериев выхода. (IEEE 829)
Сводный отчет о тестировании содержит подробную информацию о тестировании, проведенном
на протяжении жизненного цикла разработки программного обеспечения. Элементы в итоговом
отчете по тестированию различаются от организации к организации, а также различаются
для разных проектов. Информация в отчете об испытаниях основывается на аудитории отчета
об испытаниях. Аудитория может быть клиентом, менеджментом, бизнес-аналитиком,
разработчиками, членами команды тестирования, членами организации и т. д.

** Матрица трассируемости (RTM - Requirement Traceability Matrix)
Трассируемость (traceability): Способность идентифицировать связанные объекты в
документации и программном обеспечении, например, требования со связанными с ними
тестами. (ISTQB)
Матрица трассируемости (traceability matrix): Двумерная таблица, описывающая связь двух
сущностей (например, требований и тестовых сценариев). Таблица позволяет производить
прямую и обратную трассировку от одной сущности к другой, обеспечивая таким образом
возможность определения покрытия и оценки влияния предполагаемых изменений. (ISTQB)

Матрица трассируемости (Requirement Traceability Matrix AKA Traceability Matrix or Cross
Reference Matrix) используется для документирования связей между требованиями
и тест-кейсами по этим требованиям и наглядного отображения трассируемости в виде
простой таблицы.
Матрица трассируемости может служить одновременно в качестве матрицы покрытия. Наличие
такой матрицы позволяет объективно оценить, какая часть продукта покрыта тестами,
а какая нет.
Виды трассируемости:
1. Вертикальная трассируемость (vertical traceability): Отслеживание требований через
уровни разработки к компонентам. (ISTQB)
2. Горизонтальная трассируемость (horizontal traceability): Трассировка требований
к уровню тестирования по отношению к уровням документации (например, план тестирования,
спецификация проектирования теста, спецификация тестовых сценариев и спецификация
процедуры тестирования или автоматизированный сценарий тестирования). (ISTQB)

** Метрики тестирования (Software Test Metrics)
Метрика (metric): Шкала измерений и метод, используемый для измерений (ISO 14598)
“Вы не можете контролировать то, что не можете измерить” - Том Демакро.
Основная цель тестирования заключается в предоставлении информации, необходимой для
управления рисками. Чтобы контролировать и управлять тестированием, а также предоставлять
своевременную информацию заинтересованным сторонам, необходимы эффективные измерения
процесса тестирования. Для измерения процесса тестирования нужно определить,
какая информация должна быть предоставлена, как ее получить и как она должна быть
представлена. Таким образом, для всех действий тестирования необходимо определить
и использовать метрики, а также предоставить показатели измерений, как для продуктов,
так и для процессов.

Метрики тестирования (Software Test Metrics)
Метрика (metric): Шкала измерений и метод, используемый для измерений (ISO 14598)
“Вы не можете контролировать то, что не можете измерить” - Том Демакро.
Основная цель тестирования заключается в предоставлении информации, необходимой для
управления рисками. Чтобы контролировать и управлять тестированием, а также предоставлять
своевременную информацию заинтересованным сторонам, необходимы эффективные измерения
процесса тестирования. Для измерения процесса тестирования нужно определить,
какая информация должна быть предоставлена, как ее получить и как она должна быть
представлена. Таким образом, для всех действий тестирования необходимо определить
и использовать метрики, а также предоставить показатели измерений, как для продуктов,
так и для процессов.
Метрики тестирования программного обеспечения подразделяются на два типа:
1. Метрики процесса (Process metrics): используются в процессе подготовки и выполнения
тестирования.
Продуктивность подготовки тест-кейсов
Охват тестового дизайна
Продуктивность выполнения тестов
Покрытие выполненных тестов
Успешные тест-кейсы
Неуспешные тест-кейсы
Заблокированные тест-кейсы
2. Метрики продукта (Product metrics):
Уровень обнаружения ошибок
Процент выявления дефектов
Уровень исправления дефектов 
Плотность дефектов
Утечка дефектов 
Эффективность устранения дефектов

Тестовое покрытие
Существуют следующие подходы к оценке и измерению тестового покрытия:
● Покрытие требований (Requirements Coverage) - оценка покрытия тестами функциональных
и нефункциональных требований к продукту путем построения матриц трассировки
(traceability matrix).
● Покрытие кода (Code Coverage) - оценка покрытия исполняемого кода тестами, путем
отслеживания непроверенных в процессе тестирования частей ПО.
● Тестовое покрытие на базе анализа потока управления - это одна из техник тестирования
белого ящика, основанная на определении путей выполнения кода программного модуля
и создания выполняемых тест кейсов для покрытия этих путей.

** Тестовый оракул (Test oracle)
Тестовый предсказатель (test oracle): Источник, при помощи которого можно определить
ожидаемые результаты для сравнения с реальными результатами, выдаваемыми тестируемой
системой. В роли тестового предсказателя могут выступать уже имеющаяся система
(для эталонного тестирования), руководство пользователя, профессиональные знания
специалиста, однако им не может быть программный код. (ISTQB)
Тестовый оракул - это механизм для определения того, прошел ли тест или нет.
Использование оракулов включает сравнение (для заданных входных данных тестового примера)
выходных данных тестируемой системы с выходными данными, которые, по определению оракула,
должен иметь продукт. 
