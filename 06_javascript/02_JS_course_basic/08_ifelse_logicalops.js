
// Условные операторы и конструкция if else

/** Операторы "сравнения"
 * > "больше"
 * < "меньше"
 * >= "больше или равно"
 * <= "меньше или равно"
 * == "нестрогое равенство" не проверяет на тип данных и автоматически преобразовывает строку в число 
 * === "строгое равенство" проверяет тип данных
 * != "нестрогое неравенство"
 * !== "строгое неравенство"
 * || "или" запинается на true - каждое значение пытается преобразовать к true
 * && "и" запинается на false - каждое значение пытается преобразовать к false
 * ! "не" возвращает противоположное значение текущему в булевом значении
 */ 

let value;

// 1. Сравнение строк. Каждый символ строки имеет свое числовое представление
value = 'a' > 'a'; // числовое представление одинаковое, поэтому false
value = 'a' > 'A'; // числовое представление разное, поэтому true
value = 'a' > 'ab'; // так же строки сравниваются посимвольно 
value = 'a'.charCodeAt // получение юникода строки

// Условия if else и операторы логические
// Конструкция:
// if (условие) {
//    код, который должен отработаться, если условие true
// } else {
//    код, если это условие не выполнится
// }

// 2. Простой пример работы if else
value = 10;
if (value === 10) {
    console.log('2: ' + 'value: 10');
} else {
    console.log('2: ' + 'else');
}

// 3. Проверка на наличие переменной - оно не NaN, не пустая строка, не undefined
if (value) {
    console.log('3: ' + 'some action')
} else {
    console.log('3: ' + 'else', value);
}

// 4. Проверка на отсутствие значения через !
value = null;
console.log('4: ' + !value); // возвращает тру, т.к. null - false, а оператор "не" возвращает противоположное значение текущему 

// 5. Проверка в случаях сложных данных массивов или объектов
// 5.1
value = [1]; // проверка есть ли что-то в массиве через length
if (value.length) {
    console.log('5.1: ' + value);
} else {
    console.log('5.1: ' + 'array is empty')
}

// 5.2
value = [1, 2, 3]; // проверка является ли переменная массивом
if (Array.isArray(value)) {
    console.log('5.2: ' + value);
} else {
    console.log('5.2: ' + 'array is empty');
}

// 5.3
let user = {
    name: 'Denis'
};

// 5.3.1 проверка, есть ли в объекте имя
if (user.name) {
    console.log('5.3.1: ' + user.name);
} else {
    console.log('5.3.1: ' + 'else');
}

// 5.3.2 проверка, есть ли в объекте имя через hasOwnProperty, который вернет любое значение - NaN, null и так далее
if (user.hasOwnProperty('name')) {
    console.log('5.3.2: ' + user.name);
} else {
    console.log('5.3.2: ' + 'else');
}

// 6. Оператор или
value = 1 || 0; // или останавливается на правде и если оно преобразовывается, то он возвращает это значение
// 6.1
let age = 10;
if (age < 16 || age > 65) {
    console.log('6.1: ' + 'some action')
} else {
    console.log('6.1: ' + 'else')
}

// 6.2 Оператор или используется часто используется в определении значения для переменной
let serverNickname = 'Denis' // нужно проверить, если есть переменная serverNickname, то мы должны присвоить её nickname, если нет, то дефолтный никнейм
let nickname = serverNickname || 'default nickname';
console.log('6.2: ' + nickname);

// 7. Оператор и запинается на лжи, пытается вернуть false, если ни одного false не вернет, возвращает последний true
// 7.1
value = 1 && 0 && 3;
console.log('7.1 ' + value);

// 7.2
let productPrice = 10;
if (productPrice >= 5 && productPrice <=20) { // обязательно две части условия должны быть правдивыми
    console.log('7.2 ' + 'беру');
} else {
    console.log('7.2 ' + 'else');
}

// 8. else if Дает возможность сделать несколько проверок. 
value = 10;
if (value < 10) {
    console.log('8 ' + 'value < 10', value);
} else if (value >= 10) {
    console.log('8 ' + 'value >= 10', value);
} else {
    console.log('8 ' + 'else');
}
