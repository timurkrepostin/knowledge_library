
// Циклы
// Практически любой цикл, кроме for of и for in состоит из нескольких частей 
// 1. Итератор - счетчик, который определяет сколько прошло итераций, шаг, с которым надо считать
// 2. Условие, пока условие действительно, код будет выполняться, условие работать
// 3. Действие, которое манипулирует шагом или делает так, что условие сохраняется правдивым или в какой-то момент становится неправдивым

/** Синтаксис циклов
 * while - в фигурных скобках тело цикла, которое будет выполняться, пока в круглых скобка выражение будет true
//   пока цикл не выполнится, следующая часть кода выполняться не будет
 * do while - в отличии от while, сначала выполнит какое-то действие, а потом произойдет проверка условия.
//  do, фигурные скобки, while условие
 * for - ключевое слово for (указываем инициализацию; далее идет условие; увеличение итератора) точки запятые обязательно
// последовательность работы: сначала идет инициализация (только при запуске), проверка условия, выполняется тело цикла, проверка условия, выполняется тело, прка условие true
 * for of - служит для более удобного перебора массива
 * for in - здесь нет итератора, этот цикл пройдется по всем ключам объекта, пока они все не закончатся
 */

// 1. while

// let i = 0; // i - итератор
// while (i < 10) {
// сonsole.log(i);
// } 
// такой цикл будет бесконечным, по причине того, что условие никогда не будет false, потому что i = 0, поэтому i нужно увеличивать

// let i = 0; 
// while (i < 10) {
//     console.log(i);
//     i++; 
// }

// запустился цикл, проверил i < 10, вывел console.log, увеличил i на единицу, пошел на следующий шаг и так до конца, пока i не дошел до 10
// это можно упростить, перенеся увелечение итераратора в while

// let i = 0; 
// while (i++ < 10) {
//     console.log(i);
// }

// так как инкримент стоит после переменной, работа началась на следующем шаге, поэтому вывод цикла начался с 1, а не с 0, а закончилось на 10, не как в предыдущем примере

// let i = 10;
// while(i--) {
//     console.log(i);
// }

// цикл остановил работу дойдя до нуля, потому что 0 - false, 9-0

// 2. do while

// let i = 10;
// while(i--) {
// console.log(i);
// }
// do {
//     console.log('action');
// } while(i > 0); 

// цикл прошел, выполнив сначала действие 10-1 и так на протяжении всей итерации дойдя до 0, после 0 вывел 'action'

// 3. for

// for (let i = 0; i < 10; i++ ) {
//     console.log(i);
// }
// 1. инициализировалась i (0), 2. прошла проверка i < 10, 3. выполнилось тело console.log(i); 4. прошла итерация i++ . и далее выполнялись 2, 3, 4 
// пока при проверке i === 10; 

// 3.1 Перебор строк 
// Перебирать можно любые итерируемые вещи: массивы, строки, специфичные объекты 

// let str = 'Hello';
// let res = '';

// for (let i = 0; i < str.length; i++) { // как обозначается условие: так как перебираем какую-то сущность, мы должны ориентироваться от её длины
//     console.log(str[i]); // что даст доступ к каждому символу на каждой итерации, например
//     res += str[i] + '*' // += сложение с присваеванием
// }
// console.log(res);

// 3.2 Перебор массивов

// 3.2.1

// let colors = ['white', 'black', 'yellow', 'orange']; 
// for (let i = 0; i < colors.length; i++) { // в свойства переменной i, заряди необходимое для работы цикла
//     console.log(colors[i]); //
//     colors[i] = colors[i].toUpperCase(); // поднятие регистра всех символов значения массива
// }
// console.log(colors);

// continue & brake

// 3.2.2 

// for (let i = 0; i < 10; i++ ) {
//     if (i === 5) {
//         continue; // заставляет прекратить/пропустить итерацию. Итерация при выведении 5 пропущена [0-4 & 6-9]
//     }
//     console.log(i);
// }

// 3.2.3 

// for (let i = 0; i < 10; i++ ) {
//     if (i === 5) {
//         break; // остановил цикл когда нашел 5, [0 - 4]
//     }
//     console.log(i);
// }

// 3.4 Перебор массивов с объектами

// 3.4.1

// const users = [
//     {
//         name: 'Denis',
//         age: 30,
//         lastname: 'Mitr'
//     },
//     {
//         name: 'Oleg',
//         age: 12,
//         lastname: 'Offer'
//     },
//     {
//         name: 'Maks',
//         age: 25,
//         lastname: 'Object'
//     },
//     {
//         name: 'Olga',
//         age: 2,
//         lastname: 'Misha'
//     },
// ];

// из этого массива можно сформировать объект

// const usersObj = {}; // создание пустого объекта, чтобы в дальнейшем ключами были имена, а значения были объекты самого пользователя
// for (let i = 0; i < users.length; i++) {
//     // console.log(users[i].age) // вывод 
//     usersObj[users[i].name] = users[i];
// }
// console.log(usersObj); // вывод этого самого объекта
// console.log(usersObj['Maks']); // вывод конкретного объекта

// Циклы for of и for in

// 3.5 for in для перебора объектов

// 3.5.1 

// const user = {
//     name: 'Denis',
//     age: 30,
//     lastname: 'Maloy'
// };
// for (let key in users) { // объявляем переменную и объект, который хотим перебрать
//     // console.log(key); // выводит название ключей - name и age
//     // console.log(user[key]); // выводит значение - denis и 30
// }

// 3.5.2 Тот же самый процесс для примера 3.4.1

// for (let key in usersObj) {
//     // console.log(key); 
//     // console.log(usersObj[key]); 
// }

// 3.6 for of имеет так же ключевые слова continue & break

// for (let value of users) {
//     console.log(value);
// }